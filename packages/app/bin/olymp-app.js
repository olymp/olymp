#!/usr/bin/env node
var fs = require('fs');
var path = require('path');
var rimraf = require('rimraf');
var webpack = require('webpack');
var urlUtil = require('url');
require('dotenv').config();
var createConfig = require(path.resolve(__dirname, '..', 'webpack-config.js'));
var command = process.argv[process.argv.length - 1];
if (['start', 'build'].includes(command)) {
    process.env.NODE_ENV = 'production';
}
var _a = process.env, SSR = _a.SSR, SERVERLESS = _a.SERVERLESS, NODE_ENV = _a.NODE_ENV, PORT = _a.PORT, URL = _a.URL;
var ssr = SSR != 'false';
var serverless = SERVERLESS == 'true';
if (command === 'dev') {
    var port = parseInt(PORT, 10);
    var url = new urlUtil.URL(URL || "http://localhost:" + port);
    var devPort = serverless ? port : port + 2;
    var devUrl = serverless
        ? url
        : new urlUtil.URL(url.protocol + "//" + url.hostname + ":" + devPort);
    var notifier_1 = require('node-notifier');
    var compiler = void 0;
    var watch = {
        aggregateTimeout: 300,
        poll: false,
        ignored: /node_modules/,
    };
    if (serverless) {
        compiler = webpack([
            createConfig({
                target: 'web',
                mode: 'development',
                devPort: devPort,
                devUrl: devUrl,
                ssr: ssr,
                serverless: serverless,
            }),
        ]);
    }
    else {
        compiler = webpack([
            createConfig({
                target: 'web',
                mode: 'development',
                devPort: devPort,
                devUrl: devUrl,
                ssr: ssr,
                serverless: serverless,
            }),
            createConfig({
                target: 'node',
                mode: 'development',
                devPort: devPort,
                devUrl: devUrl,
                ssr: ssr,
                serverless: serverless,
            }),
        ]);
        compiler.compilers[1].watch(watch, function (err, compilation) {
            if (err) {
                return console.log('[webpack] error:', err);
            }
            var stats = compilation.stats || [compilation];
            console.log('[webpack] the following asset bundles were built:');
            stats.forEach(function (c) { return console.log(c.toString()); });
            notifier_1.notify('Ready');
        });
    }
    var WebpackDevServer = require('webpack-dev-server');
    var server = new WebpackDevServer(compiler.compilers[0], {
        headers: {
            'Access-Control-Allow-Origin': '*',
        },
        watchOptions: watch,
        host: devUrl.hostname,
        port: devUrl.port,
        disableHostCheck: true,
        historyApiFallback: true,
        hot: true,
        stats: {
            colors: true,
            hash: false,
            version: false,
            timings: false,
            assets: false,
            chunks: false,
            modules: false,
            reasons: false,
            children: false,
            source: false,
            errors: true,
            errorDetails: true,
            warnings: false,
            publicPath: false,
        },
    });
    server.listen(devPort);
}
else if (command === 'build') {
    rimraf.sync(path.resolve(process.cwd(), '.dist'));
    process.env.NODE_ENV = 'production';
    var configs = [
        createConfig({ target: 'web', mode: 'production', ssr: ssr, serverless: serverless }),
    ];
    if (!serverless) {
        configs.push(createConfig({ target: 'node', mode: 'production', ssr: ssr, serverless: serverless }));
    }
    var compiler = webpack(configs);
    compiler.run(function (err, compilation) {
        if (err) {
            console.error(err);
            return process.exit(1);
        }
        var stats = compilation.stats || [compilation];
        console.log('[webpack] the following asset bundles were built:');
        stats.forEach(function (c) { return console.log(c.toString()); });
    });
}
else if (command.indexOf('build:') === 0) {
    var target = command.split(':')[1];
    rimraf.sync(path.resolve(process.cwd(), '.dist', target));
    process.env.NODE_ENV = 'production';
    var compiler = webpack([
        createConfig({ target: target, mode: 'production', ssr: ssr, serverless: serverless }),
    ]);
    compiler.run(function (err, compilation) {
        if (err) {
            console.error(err);
            return process.exit(1);
        }
        var stats = compilation.stats || [compilation];
        console.log('[webpack] the following asset bundles were built:');
        stats.forEach(function (c) { return console.log(c.toString()); });
        stats.forEach(function (c) {
            return fs.writeFileSync(path.resolve(__dirname, 'stats.json'), c.toJson());
        });
    });
}
else if (command === 'start') {
    require(path.resolve(process.cwd(), '.dist', 'node', 'main'));
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FwcC9iaW4vb2x5bXAtYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxJQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbkMsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQy9CLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUUzQixJQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FDdkMsU0FBUyxFQUNULElBQUksRUFDSixtQkFBbUIsQ0FDcEIsQ0FBQyxDQUFDO0FBRUgsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQTBCdEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxZQUFZLENBQUM7QUFDdEMsQ0FBQztBQUVLLElBQUEsZ0JBQXNELEVBQXBELFlBQUcsRUFBRSwwQkFBVSxFQUFFLHNCQUFRLEVBQUUsY0FBSSxFQUFFLFlBQUcsQ0FBaUI7QUFFN0QsSUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLE9BQU8sQ0FBQztBQUMzQixJQUFNLFVBQVUsR0FBRyxVQUFVLElBQUksTUFBTSxDQUFDO0FBRXhDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLElBQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDaEMsSUFBTSxHQUFHLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxzQkFBb0IsSUFBTSxDQUFDLENBQUM7SUFDL0QsSUFBTSxPQUFPLEdBQUcsVUFBVSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQzdDLElBQU0sTUFBTSxHQUFHLFVBQVU7VUFDckIsR0FBRztVQUNILElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBSSxHQUFHLENBQUMsUUFBUSxVQUFLLEdBQUcsQ0FBQyxRQUFRLFNBQUksT0FBUyxDQUFDLENBQUM7SUFFbkUsSUFBTSxVQUFRLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRTFDLElBQUksUUFBUSxTQUFBLENBQUM7SUFDYixJQUFNLEtBQUssR0FBRztRQUNaLGdCQUFnQixFQUFFLEdBQUc7UUFDckIsSUFBSSxFQUFFLEtBQUs7UUFDWCxPQUFPLEVBQUUsY0FBYztLQUN4QixDQUFDO0lBQ0YsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNmLFFBQVEsR0FBRyxPQUFPLENBQUM7WUFDakIsWUFBWSxDQUFDO2dCQUNYLE1BQU0sRUFBRSxLQUFLO2dCQUNiLElBQUksRUFBRSxhQUFhO2dCQUNuQixPQUFPLFNBQUE7Z0JBQ1AsTUFBTSxRQUFBO2dCQUNOLEdBQUcsS0FBQTtnQkFDSCxVQUFVLFlBQUE7YUFDWCxDQUFDO1NBQ0gsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sUUFBUSxHQUFHLE9BQU8sQ0FBQztZQUNqQixZQUFZLENBQUM7Z0JBQ1gsTUFBTSxFQUFFLEtBQUs7Z0JBQ2IsSUFBSSxFQUFFLGFBQWE7Z0JBQ25CLE9BQU8sU0FBQTtnQkFDUCxNQUFNLFFBQUE7Z0JBQ04sR0FBRyxLQUFBO2dCQUNILFVBQVUsWUFBQTthQUNYLENBQUM7WUFDRixZQUFZLENBQUM7Z0JBQ1gsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsSUFBSSxFQUFFLGFBQWE7Z0JBQ25CLE9BQU8sU0FBQTtnQkFDUCxNQUFNLFFBQUE7Z0JBQ04sR0FBRyxLQUFBO2dCQUNILFVBQVUsWUFBQTthQUNYLENBQUM7U0FDSCxDQUFDLENBQUM7UUFDSCxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsVUFBQyxHQUFHLEVBQUUsV0FBVztZQUNsRCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNSLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzlDLENBQUM7WUFDRCxJQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsS0FBSyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDakQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO1lBQ2pFLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUF6QixDQUF5QixDQUFDLENBQUM7WUFDOUMsVUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDRCxJQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3ZELElBQU0sTUFBTSxHQUFHLElBQUksZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUN6RCxPQUFPLEVBQUU7WUFDUCw2QkFBNkIsRUFBRSxHQUFHO1NBQ25DO1FBQ0QsWUFBWSxFQUFFLEtBQUs7UUFDbkIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxRQUFRO1FBQ3JCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtRQUNqQixnQkFBZ0IsRUFBRSxJQUFJO1FBQ3RCLGtCQUFrQixFQUFFLElBQUk7UUFDeEIsR0FBRyxFQUFFLElBQUk7UUFDVCxLQUFLLEVBQUU7WUFDTCxNQUFNLEVBQUUsSUFBSTtZQUNaLElBQUksRUFBRSxLQUFLO1lBQ1gsT0FBTyxFQUFFLEtBQUs7WUFDZCxPQUFPLEVBQUUsS0FBSztZQUNkLE1BQU0sRUFBRSxLQUFLO1lBQ2IsTUFBTSxFQUFFLEtBQUs7WUFDYixPQUFPLEVBQUUsS0FBSztZQUNkLE9BQU8sRUFBRSxLQUFLO1lBQ2QsUUFBUSxFQUFFLEtBQUs7WUFDZixNQUFNLEVBQUUsS0FBSztZQUNiLE1BQU0sRUFBRSxJQUFJO1lBQ1osWUFBWSxFQUFFLElBQUk7WUFDbEIsUUFBUSxFQUFFLEtBQUs7WUFDZixVQUFVLEVBQUUsS0FBSztTQUNsQjtLQUNGLENBQUMsQ0FBQztJQUNILE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDekIsQ0FBQztBQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDO0lBQ3BDLElBQU0sT0FBTyxHQUFHO1FBQ2QsWUFBWSxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEdBQUcsS0FBQSxFQUFFLFVBQVUsWUFBQSxFQUFFLENBQUM7S0FDckUsQ0FBQztJQUNGLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNoQixPQUFPLENBQUMsSUFBSSxDQUNWLFlBQVksQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxHQUFHLEtBQUEsRUFBRSxVQUFVLFlBQUEsRUFBRSxDQUFDLENBQ3RFLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBQyxHQUFHLEVBQUUsV0FBVztRQUM1QixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ1IsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixDQUFDO1FBQ0QsSUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLEtBQUssSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pELE9BQU8sQ0FBQyxHQUFHLENBQUMsbURBQW1ELENBQUMsQ0FBQztRQUlqRSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBekIsQ0FBeUIsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzFELE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQztJQUNwQyxJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDdkIsWUFBWSxDQUFDLEVBQUUsTUFBTSxRQUFBLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxHQUFHLEtBQUEsRUFBRSxVQUFVLFlBQUEsRUFBRSxDQUFDO0tBQzlELENBQUMsQ0FBQztJQUNILFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBQyxHQUFHLEVBQUUsV0FBVztRQUM1QixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ1IsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixDQUFDO1FBQ0QsSUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLEtBQUssSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pELE9BQU8sQ0FBQyxHQUFHLENBQUMsbURBQW1ELENBQUMsQ0FBQztRQUNqRSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBekIsQ0FBeUIsQ0FBQyxDQUFDO1FBQzlDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO1lBQ2IsT0FBQSxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUFuRSxDQUFtRSxDQUNwRSxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQy9CLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDaEUsQ0FBQyIsImZpbGUiOiJwYWNrYWdlcy9hcHAvYmluL29seW1wLWFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHJpbXJhZiA9IHJlcXVpcmUoJ3JpbXJhZicpO1xuY29uc3Qgd2VicGFjayA9IHJlcXVpcmUoJ3dlYnBhY2snKTtcbmNvbnN0IHVybFV0aWwgPSByZXF1aXJlKCd1cmwnKTtcbnJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpO1xuXG5jb25zdCBjcmVhdGVDb25maWcgPSByZXF1aXJlKHBhdGgucmVzb2x2ZShcbiAgX19kaXJuYW1lLFxuICAnLi4nLFxuICAnd2VicGFjay1jb25maWcuanMnXG4pKTtcblxuY29uc3QgY29tbWFuZCA9IHByb2Nlc3MuYXJndltwcm9jZXNzLmFyZ3YubGVuZ3RoIC0gMV07XG5cbi8qIGNvbnN0IGV4aXN0cyA9IChwLCB0aHJvd0Vycm9yKSA9PiB7XG4gIGNvbnN0IGRvZXNFeGlzdCA9IGZzLmV4aXN0c1N5bmMocGF0aC5yZXNvbHZlKGFwcFJvb3REaXIuZ2V0KCksIGAke3B9LmpzYCkpIHx8IGZzLmV4aXN0c1N5bmMocGF0aC5yZXNvbHZlKGFwcFJvb3REaXIuZ2V0KCksIHAsICdpbmRleC5qcycpKTtcbiAgaWYgKCFkb2VzRXhpc3QgJiYgdGhyb3dFcnJvcikgdGhyb3cgbmV3IEVycm9yKGAke3B9IG5vdCBmb3VuZCBpbiB5b3VyIHJvb3QgZGlyIWApO1xuICBlbHNlIGlmICghZG9lc0V4aXN0KSBjb25zb2xlLmxvZyhgJHtwfSBub3QgZm91bmQgaW4geW91ciByb290IGRpciFgKTtcbiAgcmV0dXJuIGRvZXNFeGlzdDtcbn07XG5cbmV4aXN0cygnc2VydmVyJyk7XG5leGlzdHMoJ2FwcCcsIHRydWUpO1xuXG5yZXF1aXJlKCdiYWJlbC1yZWdpc3RlcicpKHtcbiAgcHJlc2V0czogW1xuICAgIFtyZXF1aXJlLnJlc29sdmUoJ2JhYmVsLXByZXNldC1lbnYnKSwgeyB0YXJnZXRzOiB7IG5vZGU6IHRydWUgfSB9XSxcbiAgICByZXF1aXJlLnJlc29sdmUoJ2JhYmVsLXByZXNldC1zdGFnZS0zJyksXG4gICAgcmVxdWlyZS5yZXNvbHZlKCdiYWJlbC1wcmVzZXQtcmVhY3QnKSxcbiAgXSxcbiAgb25seTogW1xuICAgIHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICd0b29scycpLFxuICAgIHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICdzcmMnKSxcbiAgICBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnY29uZmlnJyksXG4gICAgcGF0aC5yZXNvbHZlKGFwcFJvb3REaXIuZ2V0KCksICd1bml2ZXJzYWxseS5jb25maWcuanMnKVxuICBdLFxufSk7Ki9cblxuaWYgKFsnc3RhcnQnLCAnYnVpbGQnXS5pbmNsdWRlcyhjb21tYW5kKSkge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViA9ICdwcm9kdWN0aW9uJztcbn1cblxuY29uc3QgeyBTU1IsIFNFUlZFUkxFU1MsIE5PREVfRU5WLCBQT1JULCBVUkwgfSA9IHByb2Nlc3MuZW52O1xuXG5jb25zdCBzc3IgPSBTU1IgIT0gJ2ZhbHNlJztcbmNvbnN0IHNlcnZlcmxlc3MgPSBTRVJWRVJMRVNTID09ICd0cnVlJztcblxuaWYgKGNvbW1hbmQgPT09ICdkZXYnKSB7XG4gIGNvbnN0IHBvcnQgPSBwYXJzZUludChQT1JULCAxMCk7XG4gIGNvbnN0IHVybCA9IG5ldyB1cmxVdGlsLlVSTChVUkwgfHwgYGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fWApO1xuICBjb25zdCBkZXZQb3J0ID0gc2VydmVybGVzcyA/IHBvcnQgOiBwb3J0ICsgMjtcbiAgY29uc3QgZGV2VXJsID0gc2VydmVybGVzc1xuICAgID8gdXJsXG4gICAgOiBuZXcgdXJsVXRpbC5VUkwoYCR7dXJsLnByb3RvY29sfS8vJHt1cmwuaG9zdG5hbWV9OiR7ZGV2UG9ydH1gKTtcblxuICBjb25zdCBub3RpZmllciA9IHJlcXVpcmUoJ25vZGUtbm90aWZpZXInKTtcblxuICBsZXQgY29tcGlsZXI7XG4gIGNvbnN0IHdhdGNoID0ge1xuICAgIGFnZ3JlZ2F0ZVRpbWVvdXQ6IDMwMCxcbiAgICBwb2xsOiBmYWxzZSxcbiAgICBpZ25vcmVkOiAvbm9kZV9tb2R1bGVzLyxcbiAgfTtcbiAgaWYgKHNlcnZlcmxlc3MpIHtcbiAgICBjb21waWxlciA9IHdlYnBhY2soW1xuICAgICAgY3JlYXRlQ29uZmlnKHtcbiAgICAgICAgdGFyZ2V0OiAnd2ViJyxcbiAgICAgICAgbW9kZTogJ2RldmVsb3BtZW50JyxcbiAgICAgICAgZGV2UG9ydCxcbiAgICAgICAgZGV2VXJsLFxuICAgICAgICBzc3IsXG4gICAgICAgIHNlcnZlcmxlc3MsXG4gICAgICB9KSxcbiAgICBdKTtcbiAgfSBlbHNlIHtcbiAgICBjb21waWxlciA9IHdlYnBhY2soW1xuICAgICAgY3JlYXRlQ29uZmlnKHtcbiAgICAgICAgdGFyZ2V0OiAnd2ViJyxcbiAgICAgICAgbW9kZTogJ2RldmVsb3BtZW50JyxcbiAgICAgICAgZGV2UG9ydCxcbiAgICAgICAgZGV2VXJsLFxuICAgICAgICBzc3IsXG4gICAgICAgIHNlcnZlcmxlc3MsXG4gICAgICB9KSxcbiAgICAgIGNyZWF0ZUNvbmZpZyh7XG4gICAgICAgIHRhcmdldDogJ25vZGUnLFxuICAgICAgICBtb2RlOiAnZGV2ZWxvcG1lbnQnLFxuICAgICAgICBkZXZQb3J0LFxuICAgICAgICBkZXZVcmwsXG4gICAgICAgIHNzcixcbiAgICAgICAgc2VydmVybGVzcyxcbiAgICAgIH0pLFxuICAgIF0pO1xuICAgIGNvbXBpbGVyLmNvbXBpbGVyc1sxXS53YXRjaCh3YXRjaCwgKGVyciwgY29tcGlsYXRpb24pID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKCdbd2VicGFja10gZXJyb3I6JywgZXJyKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0YXRzID0gY29tcGlsYXRpb24uc3RhdHMgfHwgW2NvbXBpbGF0aW9uXTtcbiAgICAgIGNvbnNvbGUubG9nKCdbd2VicGFja10gdGhlIGZvbGxvd2luZyBhc3NldCBidW5kbGVzIHdlcmUgYnVpbHQ6Jyk7XG4gICAgICBzdGF0cy5mb3JFYWNoKGMgPT4gY29uc29sZS5sb2coYy50b1N0cmluZygpKSk7XG4gICAgICBub3RpZmllci5ub3RpZnkoJ1JlYWR5Jyk7XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgV2VicGFja0RldlNlcnZlciA9IHJlcXVpcmUoJ3dlYnBhY2stZGV2LXNlcnZlcicpO1xuICBjb25zdCBzZXJ2ZXIgPSBuZXcgV2VicGFja0RldlNlcnZlcihjb21waWxlci5jb21waWxlcnNbMF0sIHtcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonLFxuICAgIH0sXG4gICAgd2F0Y2hPcHRpb25zOiB3YXRjaCxcbiAgICBob3N0OiBkZXZVcmwuaG9zdG5hbWUsXG4gICAgcG9ydDogZGV2VXJsLnBvcnQsXG4gICAgZGlzYWJsZUhvc3RDaGVjazogdHJ1ZSxcbiAgICBoaXN0b3J5QXBpRmFsbGJhY2s6IHRydWUsXG4gICAgaG90OiB0cnVlLFxuICAgIHN0YXRzOiB7XG4gICAgICBjb2xvcnM6IHRydWUsXG4gICAgICBoYXNoOiBmYWxzZSxcbiAgICAgIHZlcnNpb246IGZhbHNlLFxuICAgICAgdGltaW5nczogZmFsc2UsXG4gICAgICBhc3NldHM6IGZhbHNlLFxuICAgICAgY2h1bmtzOiBmYWxzZSxcbiAgICAgIG1vZHVsZXM6IGZhbHNlLFxuICAgICAgcmVhc29uczogZmFsc2UsXG4gICAgICBjaGlsZHJlbjogZmFsc2UsXG4gICAgICBzb3VyY2U6IGZhbHNlLFxuICAgICAgZXJyb3JzOiB0cnVlLFxuICAgICAgZXJyb3JEZXRhaWxzOiB0cnVlLFxuICAgICAgd2FybmluZ3M6IGZhbHNlLFxuICAgICAgcHVibGljUGF0aDogZmFsc2UsXG4gICAgfSxcbiAgfSk7XG4gIHNlcnZlci5saXN0ZW4oZGV2UG9ydCk7XG59IGVsc2UgaWYgKGNvbW1hbmQgPT09ICdidWlsZCcpIHtcbiAgcmltcmFmLnN5bmMocGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksICcuZGlzdCcpKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAncHJvZHVjdGlvbic7XG4gIGNvbnN0IGNvbmZpZ3MgPSBbXG4gICAgY3JlYXRlQ29uZmlnKHsgdGFyZ2V0OiAnd2ViJywgbW9kZTogJ3Byb2R1Y3Rpb24nLCBzc3IsIHNlcnZlcmxlc3MgfSksXG4gIF07XG4gIGlmICghc2VydmVybGVzcykge1xuICAgIGNvbmZpZ3MucHVzaChcbiAgICAgIGNyZWF0ZUNvbmZpZyh7IHRhcmdldDogJ25vZGUnLCBtb2RlOiAncHJvZHVjdGlvbicsIHNzciwgc2VydmVybGVzcyB9KVxuICAgICk7XG4gIH1cbiAgY29uc3QgY29tcGlsZXIgPSB3ZWJwYWNrKGNvbmZpZ3MpO1xuICBjb21waWxlci5ydW4oKGVyciwgY29tcGlsYXRpb24pID0+IHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICByZXR1cm4gcHJvY2Vzcy5leGl0KDEpO1xuICAgIH1cbiAgICBjb25zdCBzdGF0cyA9IGNvbXBpbGF0aW9uLnN0YXRzIHx8IFtjb21waWxhdGlvbl07XG4gICAgY29uc29sZS5sb2coJ1t3ZWJwYWNrXSB0aGUgZm9sbG93aW5nIGFzc2V0IGJ1bmRsZXMgd2VyZSBidWlsdDonKTtcbiAgICAvKiBzdGF0cy5mb3JFYWNoKGMgPT5cbiAgICAgIGZzLndyaXRlRmlsZVN5bmMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ3N0YXRzLmpzb24nKSwgYy50b0pzb24oKSlcbiAgICApOyAqL1xuICAgIHN0YXRzLmZvckVhY2goYyA9PiBjb25zb2xlLmxvZyhjLnRvU3RyaW5nKCkpKTtcbiAgfSk7XG59IGVsc2UgaWYgKGNvbW1hbmQuaW5kZXhPZignYnVpbGQ6JykgPT09IDApIHtcbiAgY29uc3QgdGFyZ2V0ID0gY29tbWFuZC5zcGxpdCgnOicpWzFdO1xuICByaW1yYWYuc3luYyhwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJy5kaXN0JywgdGFyZ2V0KSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Byb2R1Y3Rpb24nO1xuICBjb25zdCBjb21waWxlciA9IHdlYnBhY2soW1xuICAgIGNyZWF0ZUNvbmZpZyh7IHRhcmdldCwgbW9kZTogJ3Byb2R1Y3Rpb24nLCBzc3IsIHNlcnZlcmxlc3MgfSksXG4gIF0pO1xuICBjb21waWxlci5ydW4oKGVyciwgY29tcGlsYXRpb24pID0+IHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICByZXR1cm4gcHJvY2Vzcy5leGl0KDEpO1xuICAgIH1cbiAgICBjb25zdCBzdGF0cyA9IGNvbXBpbGF0aW9uLnN0YXRzIHx8IFtjb21waWxhdGlvbl07XG4gICAgY29uc29sZS5sb2coJ1t3ZWJwYWNrXSB0aGUgZm9sbG93aW5nIGFzc2V0IGJ1bmRsZXMgd2VyZSBidWlsdDonKTtcbiAgICBzdGF0cy5mb3JFYWNoKGMgPT4gY29uc29sZS5sb2coYy50b1N0cmluZygpKSk7XG4gICAgc3RhdHMuZm9yRWFjaChjID0+XG4gICAgICBmcy53cml0ZUZpbGVTeW5jKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdzdGF0cy5qc29uJyksIGMudG9Kc29uKCkpXG4gICAgKTtcbiAgfSk7XG59IGVsc2UgaWYgKGNvbW1hbmQgPT09ICdzdGFydCcpIHtcbiAgcmVxdWlyZShwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJy5kaXN0JywgJ25vZGUnLCAnbWFpbicpKTtcbn1cbiJdfQ==
