#!/usr/bin/env node
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var fs = require('fs');
var path = require('path');
var rimraf = require('rimraf');
var webpack = require('webpack');
var urlUtil = require('url');
var notifier = require('node-notifier');
var jsonfile = require('jsonfile');
var merge = require('deepmerge');
var argv = require('minimist')(process.argv.slice(1));
require('dotenv').config();
var createConfig = require(path.resolve(__dirname, '..', 'webpack-config.js'));
var root = process.cwd();
var olymprc = jsonfile.readFileSync(path.resolve(root, '.olymprc'), {
    throws: false,
});
if (olymprc.extends) {
    var topFolder_1 = path.resolve(__dirname, '..', '..');
    var concatMerge_1 = function (destinationArray, sourceArray, options) {
        return destinationArray.concat(sourceArray);
    };
    var requireFirst_1 = function (name) {
        return (jsonfile.readFileSync(path.resolve(topFolder_1, name, '.olymprc'), { throws: false }) ||
            jsonfile.readFileSync(path.resolve(topFolder_1, "olymp-" + name, '.olymprc'), {
                throws: false,
            }) ||
            {});
    };
    olymprc = olymprc.extends.reduce(function (rc, item) { return merge(requireFirst_1(item), rc, { arrayMerge: concatMerge_1 }); }, olymprc);
}
var command = argv._[1];
if (['start', 'build'].includes(command)) {
    process.env.NODE_ENV = 'production';
}
var _a = process.env, SSR = _a.SSR, SERVERLESS = _a.SERVERLESS, NODE_ENV = _a.NODE_ENV, PORT = _a.PORT, URL = _a.URL;
var ssr = SSR != 'false';
var serverless = SERVERLESS == 'true';
if (command === 'dev') {
    var port = parseInt(PORT, 10);
    var url = new urlUtil.URL(URL || "http://localhost:" + port);
    var devPort = serverless ? port : port + 2;
    var devUrl = serverless
        ? url
        : new urlUtil.URL(url.protocol + "//" + url.hostname + ":" + devPort);
    var compiler = void 0;
    var watch = {
        aggregateTimeout: 300,
        poll: false,
        ignored: /node_modules/,
    };
    if (serverless) {
        compiler = webpack([
            createConfig(__assign({ target: 'web', mode: 'development', devPort: devPort,
                devUrl: devUrl,
                ssr: ssr,
                serverless: serverless }, olymprc)),
        ]);
    }
    else {
        compiler = webpack([
            createConfig(__assign({ target: 'web', mode: 'development', devPort: devPort,
                devUrl: devUrl,
                ssr: ssr,
                serverless: serverless }, olymprc)),
            createConfig(__assign({ target: 'node', mode: 'development', devPort: devPort,
                devUrl: devUrl,
                ssr: ssr,
                serverless: serverless }, olymprc)),
        ]);
        compiler.compilers[1].watch(watch, function (err, compilation) {
            if (err) {
                return console.log('[webpack] error:', err);
            }
            var stats = compilation.stats || [compilation];
            console.log('[webpack] the following asset bundles were built:');
            stats.forEach(function (c) { return console.log(c.toString()); });
            notifier.notify('Ready');
        });
    }
    var WebpackDevServer = require('webpack-dev-server');
    var server = new WebpackDevServer(compiler.compilers[0], {
        headers: {
            'Access-Control-Allow-Origin': '*',
        },
        watchOptions: watch,
        host: devUrl.hostname,
        port: devUrl.port,
        disableHostCheck: true,
        historyApiFallback: true,
        hot: true,
        stats: {
            colors: true,
            hash: false,
            version: false,
            timings: false,
            assets: false,
            chunks: false,
            modules: false,
            reasons: false,
            children: false,
            source: false,
            errors: true,
            errorDetails: true,
            warnings: false,
            publicPath: false,
        },
    });
    server.listen(devPort);
}
else if (command === 'build') {
    rimraf.sync(path.resolve(root, '.dist'));
    process.env.NODE_ENV = 'production';
    var configs = [
        createConfig(__assign({ target: 'web', mode: 'production', ssr: ssr,
            serverless: serverless }, olymprc)),
    ];
    if (!serverless) {
        configs.push(createConfig(__assign({ target: 'node', mode: 'production', ssr: ssr,
            serverless: serverless }, olymprc)));
    }
    var compiler = webpack(configs);
    compiler.run(function (err, compilation) {
        if (err) {
            console.error(err);
            return process.exit(1);
        }
        var stats = compilation.stats || [compilation];
        console.log('[webpack] the following asset bundles were built:');
        stats.forEach(function (c) { return console.log(c.toString()); });
    });
}
else if (command.indexOf('build:') === 0) {
    var target = command.split(':')[1];
    rimraf.sync(path.resolve(process.cwd(), '.dist', target));
    process.env.NODE_ENV = 'production';
    var compiler = webpack([
        createConfig(__assign({ target: target, mode: 'production', ssr: ssr,
            serverless: serverless }, olymprc)),
    ]);
    compiler.run(function (err, compilation) {
        if (err) {
            console.error(err);
            return process.exit(1);
        }
        var stats = compilation.stats || [compilation];
        console.log('[webpack] the following asset bundles were built:');
        stats.forEach(function (c) { return console.log(c.toString()); });
        stats.forEach(function (c) {
            return fs.writeFileSync(path.resolve(__dirname, 'stats.json'), c.toJson());
        });
    });
}
else if (command === 'start') {
    require(path.resolve(process.cwd(), '.dist', 'node', 'main'));
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
