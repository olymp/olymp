/* eslint-disable no-console */

import express from 'express';
import compression from 'compression';
import { resolve as pathResolve } from 'path';
import appRootDir from 'app-root-dir';
import reactApplication from 'universally/server/middleware/reactApplication';
import security from 'universally/server/middleware/security';
import clientBundle from 'universally/server/middleware/clientBundle';
import serviceWorker from 'universally/server/middleware/serviceWorker';
import offlinePage from 'universally/server/middleware/offlinePage';
import errorHandlers from 'universally/server/middleware/errorHandlers';
import getConfig from 'universally/config/get';

const launchAPI = () => {
  app.useSession = (url, getArgs) => {
    app.set('trust proxy', 2);
    if (!getArgs) {
      getArgs = url;
      url = null;
    }
    const args = getArgs(session);
    if (url) app.use(url, session(args));
    else app.use(session(args));
  };
  try {
    const server = require('@root/server');
    if (server.default) {
      server.default(app);
    } else {
      server(app);
    }
  } catch (err) { console.log('No server.js or server/index.js file found, using default settings', err); }
};

// Create our express based server.
const app = express();

// Don't expose any software information to potential hackers.
app.disable('x-powered-by');

if (process.env.NODE_ENV !== 'production') launchAPI();
// Security middlewares.
app.use(...security);

// Gzip compress the responses.
app.use(compression());

// Register our service worker which was generated by the offline-plugin
// webpack plugin. See the webpack plugins section for more information.
// Note: the service worker needs to be served from the http root of your
// application for it to work correctly.
// We only want the service worker registered for production builds and if
// the config enables it.
if (process.env.NODE_ENV !== 'development' && getConfig('serviceWorker.enabled')) {
  app.get(`/${getConfig('serviceWorker.fileName')}`, serviceWorker);
  app.get(
    `${getConfig('bundles.client.webPath')}${getConfig('serviceWorker.offlinePageFileName')}`,
    offlinePage,
  );
}

// Configure serving of our client bundle.
app.use(getConfig('bundles.client.webPath'), clientBundle);

// Configure static serving of our "public" root http path static files.
// Note: these will be served off the root (i.e. '/') of our application.
app.use(express.static(pathResolve(appRootDir.get(), getConfig('publicAssetsPath'))));

// The React application middleware.
app.get('*', reactApplication);

// Error Handler middlewares.
app.use(...errorHandlers);

// Create an http listener for our express app.
const listener = app.listen(getConfig('port'), getConfig('host'), () =>
  console.log(`Server listening on port ${getConfig('port')}`),
);

// We export the listener as it will be handy for our development hot reloader,
// or for exposing a general extension layer for application customisations.
export default listener;
