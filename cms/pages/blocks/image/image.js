function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';
import { LightboxImage, Image, EditText } from 'olymp-cloudinary';
import cn from 'classnames';
import FaAlignLeft from 'olymp-icons/lib/fa-align-left';
import FaAlignRight from 'olymp-icons/lib/fa-align-right';
import FaPlus from 'olymp-icons/lib/fa-plus';
import FaMinus from 'olymp-icons/lib/fa-minus';

import { Inline, Block } from 'slate';

export default {
  type: 'image',
  isVoid: true,
  kind: 'block',
  label: 'Bild',
  category: 'Bilder',
  component: function component(_ref) {
    var node = _ref.node,
        className = _ref.className,
        editor = _ref.editor,
        attributes = _ref.attributes,
        children = _ref.children;

    var Img = editor.props.readOnly === true ? LightboxImage : Image;
    var value = node.data.get('value') || {
      width: 400,
      height: 300
    };
    var size = node.data.get('size') || 4;
    return React.createElement(
      Img,
      {
        attributes: attributes,
        className: cn(className, 'image-block'),
        width: 100 / size + '%',
        value: value
      },
      children
    );
  },
  styles: function styles(_ref2) {
    var theme = _ref2.theme,
        getData = _ref2.getData;

    var alignment = getData('float', 'none');
    var normalized = alignment.replace('+', '');
    return {
      float: normalized,
      margin: alignment === 'none' && '0 auto',
      marginTop: alignment === 'none' && theme.space3,
      marginBottom: theme.space3,
      zIndex: 1,
      extend: [{
        condition: normalized === 'left',
        style: { marginRight: theme.space3 }
      }, {
        condition: alignment === 'left+',
        style: { marginLeft: -75 }
      }, {
        condition: normalized === 'right',
        style: { marginLeft: theme.space3 }
      }, {
        condition: alignment === 'right+',
        style: { marginRight: -75 }
      }]
    };
  },
  actions: [{
    tooltip: function tooltip(getData) {
      return 'Bild ' + (getData('value') ? 'wechseln' : 'wählen');
    },
    component: function component(_ref3) {
      var setData = _ref3.setData,
          getData = _ref3.getData,
          p = _objectWithoutProperties(_ref3, ['setData', 'getData']);

      return React.createElement(EditText, {
        onChange: function onChange(value) {
          return setData({ value: value });
        },
        value: getData('value', {}),
        multi: false
      });
    },
    toggle: function toggle() {}
  }, {
    label: React.createElement(FaAlignLeft, null),
    tooltip: 'Links anordnen',
    active: function active(_ref4) {
      var getData = _ref4.getData;
      return getData('float', 'none').indexOf('left') === 0;
    },
    toggle: function toggle(_ref5) {
      var value = _ref5.value,
          onChange = _ref5.onChange,
          node = _ref5.node;

      var alignment = node.data.get('float') || 'none';
      if (alignment === 'none') {
        onChange(value.change().removeNodeByKey(node.key).collapseToStartOfNextBlock().insertInline(Inline.create({
          type: node.type,
          isVoid: node.isVoid,
          data: node.data.set('float', 'left')
        })));
      } else if (alignment === 'left') {
        onChange(value.change().removeNodeByKey(node.key).insertInline(Inline.create({
          type: node.type,
          isVoid: node.isVoid,
          data: node.data.set('float', 'left+')
        })));
      } else {
        onChange(value.change().removeNodeByKey(node.key).insertBlock(Block.create({
          type: node.type,
          isVoid: node.isVoid,
          data: node.data.set('float', null)
        })));
      }
    }
  }, {
    label: React.createElement(FaAlignRight, null),
    tooltip: 'Rechts anordnen',
    active: function active(_ref6) {
      var getData = _ref6.getData;
      return getData('float', 'none').indexOf('right') === 0;
    },
    toggle: function toggle(_ref7) {
      var value = _ref7.value,
          onChange = _ref7.onChange,
          node = _ref7.node;

      var alignment = node.data.get('float') || 'none';

      if (alignment === 'none') {
        onChange(value.change().removeNodeByKey(node.key).insertInline(Inline.create({
          type: node.type,
          isVoid: node.isVoid,
          data: node.data.set('float', 'right')
        })));
      } else if (alignment === 'right') {
        onChange(value.change().removeNodeByKey(node.key).insertInline(Inline.create({
          type: node.type,
          isVoid: node.isVoid,
          data: node.data.set('float', 'right+')
        })));
      } else {
        onChange(value.change().removeNodeByKey(node.key).insertBlock(Block.create({
          type: node.type,
          isVoid: node.isVoid,
          data: node.data.set('float', null)
        })));
      }
    }
  }, {
    label: React.createElement(FaPlus, null),
    tooltip: 'Größer',
    toggle: function toggle(_ref8) {
      var setData = _ref8.setData,
          getData = _ref8.getData;

      var size = getData('size', 4);
      setData({
        size: size > 1 ? size - 1 : 1
      });
    }
  }, {
    label: React.createElement(FaMinus, null),
    tooltip: 'Kleiner',
    toggle: function toggle(_ref9) {
      var setData = _ref9.setData,
          getData = _ref9.getData;

      var size = getData('size', 4);
      setData({
        size: size < 8 ? size + 1 : 8
      });
    }
  }]
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
