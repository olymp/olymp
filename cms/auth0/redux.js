var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import { withDynamicRedux } from 'olymp';
import { LOCATION_REPLACE } from 'olymp-router';
import Auth0 from './auth0';

export var INIT = 'AUTH_INIT';
export var LOGIN = 'AUTH_LOGIN';
export var LOGOUT = 'AUTH_LOGOUT';
export var SET = 'AUTH_SET';

export var withRedux = function withRedux(config) {
  var name = 'auth';
  var reducer = function reducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments[1];

    if (!action || !action.type) {
      return state;
    }
    switch (action.type) {
      case SET:
        return _extends({}, state, {
          user: action.payload,
          isAuthenticated: !!action.payload
        });
      default:
        return state;
    }
  };

  var auth0 = null;
  var init = function init(_ref) {
    var dispatch = _ref.dispatch,
        getState = _ref.getState;

    if (auth0 || !process.env.AUTH0_CLIENT_ID) {
      return;
    }
    auth0 = new Auth0(config, function (payload) {
      if (payload !== false) {
        dispatch({ type: SET, payload: payload });
      }
      var _getState$location = getState().location,
          pathname = _getState$location.pathname,
          query = _getState$location.query;

      if (pathname === '/auth') {
        dispatch({
          type: LOCATION_REPLACE,
          payload: { pathname: query.pathname || '/', query: {}, hash: '' }
        });
      }
    });
    var _getState$location2 = getState().location,
        pathname = _getState$location2.pathname,
        hashQuery = _getState$location2.hashQuery;

    if (pathname === '/auth' && hashQuery && hashQuery.access_token) {
      auth0.login(false);
    } else if (pathname === '/auth') {
      auth0.login(true);
    }
  };

  var middleware = function middleware(_ref2) {
    var dispatch = _ref2.dispatch,
        getState = _ref2.getState;
    return function (nextDispatch) {
      return function (action) {
        if (!auth0) {
          return;
        }
        if (action.type === LOGIN) {
          var pathname = getState().location.pathname;

          dispatch({
            type: LOCATION_REPLACE,
            payload: { pathname: '/auth', query: { pathname: pathname } }
          });
          setTimeout(function () {
            auth0.login();
          });
        } else if (action.type === LOGOUT) {
          auth0.logout();
        } else {
          nextDispatch(action);
        }
      };
    };
  };

  return withDynamicRedux({
    name: name,
    reducer: reducer,
    middleware: middleware,
    init: init
  });
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL2F1dGgwL3JlZHV4LmVzNiJdLCJuYW1lcyI6WyJ3aXRoRHluYW1pY1JlZHV4IiwiTE9DQVRJT05fUkVQTEFDRSIsIkF1dGgwIiwiSU5JVCIsIkxPR0lOIiwiTE9HT1VUIiwiU0VUIiwid2l0aFJlZHV4IiwibmFtZSIsInJlZHVjZXIiLCJzdGF0ZSIsImFjdGlvbiIsInR5cGUiLCJ1c2VyIiwicGF5bG9hZCIsImlzQXV0aGVudGljYXRlZCIsImF1dGgwIiwiaW5pdCIsImRpc3BhdGNoIiwiZ2V0U3RhdGUiLCJwcm9jZXNzIiwiZW52IiwiQVVUSDBfQ0xJRU5UX0lEIiwiY29uZmlnIiwibG9jYXRpb24iLCJwYXRobmFtZSIsInF1ZXJ5IiwiaGFzaCIsImhhc2hRdWVyeSIsImFjY2Vzc190b2tlbiIsImxvZ2luIiwibWlkZGxld2FyZSIsInNldFRpbWVvdXQiLCJsb2dvdXQiLCJuZXh0RGlzcGF0Y2giXSwibWFwcGluZ3MiOiI7O0FBQUEsU0FBU0EsZ0JBQVQsUUFBaUMsT0FBakM7QUFDQSxTQUFTQyxnQkFBVCxRQUFpQyxjQUFqQztBQUNBLE9BQU9DLEtBQVAsTUFBa0IsU0FBbEI7O0FBRUEsT0FBTyxJQUFNQyxPQUFPLFdBQWI7QUFDUCxPQUFPLElBQU1DLFFBQVEsWUFBZDtBQUNQLE9BQU8sSUFBTUMsU0FBUyxhQUFmO0FBQ1AsT0FBTyxJQUFNQyxNQUFNLFVBQVo7O0FBRVAsT0FBTyxJQUFNQyxZQUFZLFNBQVpBLFNBQVksU0FBVTtBQUNqQyxNQUFNQyxPQUFPLE1BQWI7QUFDQSxNQUFNQyxVQUFVLFNBQVZBLE9BQVUsR0FBd0I7QUFBQSxRQUF2QkMsS0FBdUIsdUVBQWYsRUFBZTtBQUFBLFFBQVhDLE1BQVc7O0FBQ3RDLFFBQUksQ0FBQ0EsTUFBRCxJQUFXLENBQUNBLE9BQU9DLElBQXZCLEVBQTZCO0FBQzNCLGFBQU9GLEtBQVA7QUFDRDtBQUNELFlBQVFDLE9BQU9DLElBQWY7QUFDRSxXQUFLTixHQUFMO0FBQ0UsNEJBQ0tJLEtBREw7QUFFRUcsZ0JBQU1GLE9BQU9HLE9BRmY7QUFHRUMsMkJBQWlCLENBQUMsQ0FBQ0osT0FBT0c7QUFINUI7QUFLRjtBQUNFLGVBQU9KLEtBQVA7QUFSSjtBQVVELEdBZEQ7O0FBZ0JBLE1BQUlNLFFBQVEsSUFBWjtBQUNBLE1BQU1DLE9BQU8sU0FBUEEsSUFBTyxPQUE0QjtBQUFBLFFBQXpCQyxRQUF5QixRQUF6QkEsUUFBeUI7QUFBQSxRQUFmQyxRQUFlLFFBQWZBLFFBQWU7O0FBQ3ZDLFFBQUlILFNBQVMsQ0FBQ0ksUUFBUUMsR0FBUixDQUFZQyxlQUExQixFQUEyQztBQUN6QztBQUNEO0FBQ0ROLFlBQVEsSUFBSWQsS0FBSixDQUFVcUIsTUFBVixFQUFrQixtQkFBVztBQUNuQyxVQUFJVCxZQUFZLEtBQWhCLEVBQXVCO0FBQ3JCSSxpQkFBUyxFQUFFTixNQUFNTixHQUFSLEVBQWFRLGdCQUFiLEVBQVQ7QUFDRDtBQUhrQywrQkFJUEssV0FBV0ssUUFKSjtBQUFBLFVBSTNCQyxRQUoyQixzQkFJM0JBLFFBSjJCO0FBQUEsVUFJakJDLEtBSmlCLHNCQUlqQkEsS0FKaUI7O0FBS25DLFVBQUlELGFBQWEsT0FBakIsRUFBMEI7QUFDeEJQLGlCQUFTO0FBQ1BOLGdCQUFNWCxnQkFEQztBQUVQYSxtQkFBUyxFQUFFVyxVQUFVQyxNQUFNRCxRQUFOLElBQWtCLEdBQTlCLEVBQW1DQyxPQUFPLEVBQTFDLEVBQThDQyxNQUFNLEVBQXBEO0FBRkYsU0FBVDtBQUlEO0FBQ0YsS0FYTyxDQUFSO0FBSnVDLDhCQWdCUFIsV0FBV0ssUUFoQko7QUFBQSxRQWdCL0JDLFFBaEIrQix1QkFnQi9CQSxRQWhCK0I7QUFBQSxRQWdCckJHLFNBaEJxQix1QkFnQnJCQSxTQWhCcUI7O0FBaUJ2QyxRQUFJSCxhQUFhLE9BQWIsSUFBd0JHLFNBQXhCLElBQXFDQSxVQUFVQyxZQUFuRCxFQUFpRTtBQUMvRGIsWUFBTWMsS0FBTixDQUFZLEtBQVo7QUFDRCxLQUZELE1BRU8sSUFBSUwsYUFBYSxPQUFqQixFQUEwQjtBQUMvQlQsWUFBTWMsS0FBTixDQUFZLElBQVo7QUFDRDtBQUNGLEdBdEJEOztBQXdCQSxNQUFNQyxhQUFhLFNBQWJBLFVBQWE7QUFBQSxRQUFHYixRQUFILFNBQUdBLFFBQUg7QUFBQSxRQUFhQyxRQUFiLFNBQWFBLFFBQWI7QUFBQSxXQUE0QjtBQUFBLGFBQWdCLGtCQUFVO0FBQ3ZFLFlBQUksQ0FBQ0gsS0FBTCxFQUFZO0FBQ1Y7QUFDRDtBQUNELFlBQUlMLE9BQU9DLElBQVAsS0FBZ0JSLEtBQXBCLEVBQTJCO0FBQUEsY0FDakJxQixRQURpQixHQUNKTixXQUFXSyxRQURQLENBQ2pCQyxRQURpQjs7QUFFekJQLG1CQUFTO0FBQ1BOLGtCQUFNWCxnQkFEQztBQUVQYSxxQkFBUyxFQUFFVyxVQUFVLE9BQVosRUFBcUJDLE9BQU8sRUFBRUQsa0JBQUYsRUFBNUI7QUFGRixXQUFUO0FBSUFPLHFCQUFXLFlBQU07QUFDZmhCLGtCQUFNYyxLQUFOO0FBQ0QsV0FGRDtBQUdELFNBVEQsTUFTTyxJQUFJbkIsT0FBT0MsSUFBUCxLQUFnQlAsTUFBcEIsRUFBNEI7QUFDakNXLGdCQUFNaUIsTUFBTjtBQUNELFNBRk0sTUFFQTtBQUNMQyx1QkFBYXZCLE1BQWI7QUFDRDtBQUNGLE9BbEI4QztBQUFBLEtBQTVCO0FBQUEsR0FBbkI7O0FBb0JBLFNBQU9YLGlCQUFpQjtBQUN0QlEsY0FEc0I7QUFFdEJDLG9CQUZzQjtBQUd0QnNCLDBCQUhzQjtBQUl0QmQ7QUFKc0IsR0FBakIsQ0FBUDtBQU1ELENBckVNIiwiZmlsZSI6InBhY2thZ2VzL2F1dGgwL3JlZHV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgd2l0aER5bmFtaWNSZWR1eCB9IGZyb20gJ29seW1wJztcbmltcG9ydCB7IExPQ0FUSU9OX1JFUExBQ0UgfSBmcm9tICdvbHltcC1yb3V0ZXInO1xuaW1wb3J0IEF1dGgwIGZyb20gJy4vYXV0aDAnO1xuXG5leHBvcnQgY29uc3QgSU5JVCA9ICdBVVRIX0lOSVQnO1xuZXhwb3J0IGNvbnN0IExPR0lOID0gJ0FVVEhfTE9HSU4nO1xuZXhwb3J0IGNvbnN0IExPR09VVCA9ICdBVVRIX0xPR09VVCc7XG5leHBvcnQgY29uc3QgU0VUID0gJ0FVVEhfU0VUJztcblxuZXhwb3J0IGNvbnN0IHdpdGhSZWR1eCA9IGNvbmZpZyA9PiB7XG4gIGNvbnN0IG5hbWUgPSAnYXV0aCc7XG4gIGNvbnN0IHJlZHVjZXIgPSAoc3RhdGUgPSB7fSwgYWN0aW9uKSA9PiB7XG4gICAgaWYgKCFhY3Rpb24gfHwgIWFjdGlvbi50eXBlKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgIGNhc2UgU0VUOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgIHVzZXI6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgIGlzQXV0aGVudGljYXRlZDogISFhY3Rpb24ucGF5bG9hZCxcbiAgICAgICAgfTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gIH07XG5cbiAgbGV0IGF1dGgwID0gbnVsbDtcbiAgY29uc3QgaW5pdCA9ICh7IGRpc3BhdGNoLCBnZXRTdGF0ZSB9KSA9PiB7XG4gICAgaWYgKGF1dGgwIHx8ICFwcm9jZXNzLmVudi5BVVRIMF9DTElFTlRfSUQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXV0aDAgPSBuZXcgQXV0aDAoY29uZmlnLCBwYXlsb2FkID0+IHtcbiAgICAgIGlmIChwYXlsb2FkICE9PSBmYWxzZSkge1xuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IFNFVCwgcGF5bG9hZCB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgcGF0aG5hbWUsIHF1ZXJ5IH0gPSBnZXRTdGF0ZSgpLmxvY2F0aW9uO1xuICAgICAgaWYgKHBhdGhuYW1lID09PSAnL2F1dGgnKSB7XG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiBMT0NBVElPTl9SRVBMQUNFLFxuICAgICAgICAgIHBheWxvYWQ6IHsgcGF0aG5hbWU6IHF1ZXJ5LnBhdGhuYW1lIHx8ICcvJywgcXVlcnk6IHt9LCBoYXNoOiAnJyB9LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCB7IHBhdGhuYW1lLCBoYXNoUXVlcnkgfSA9IGdldFN0YXRlKCkubG9jYXRpb247XG4gICAgaWYgKHBhdGhuYW1lID09PSAnL2F1dGgnICYmIGhhc2hRdWVyeSAmJiBoYXNoUXVlcnkuYWNjZXNzX3Rva2VuKSB7XG4gICAgICBhdXRoMC5sb2dpbihmYWxzZSk7XG4gICAgfSBlbHNlIGlmIChwYXRobmFtZSA9PT0gJy9hdXRoJykge1xuICAgICAgYXV0aDAubG9naW4odHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG1pZGRsZXdhcmUgPSAoeyBkaXNwYXRjaCwgZ2V0U3RhdGUgfSkgPT4gbmV4dERpc3BhdGNoID0+IGFjdGlvbiA9PiB7XG4gICAgaWYgKCFhdXRoMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09IExPR0lOKSB7XG4gICAgICBjb25zdCB7IHBhdGhuYW1lIH0gPSBnZXRTdGF0ZSgpLmxvY2F0aW9uO1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBMT0NBVElPTl9SRVBMQUNFLFxuICAgICAgICBwYXlsb2FkOiB7IHBhdGhuYW1lOiAnL2F1dGgnLCBxdWVyeTogeyBwYXRobmFtZSB9IH0sXG4gICAgICB9KTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBhdXRoMC5sb2dpbigpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChhY3Rpb24udHlwZSA9PT0gTE9HT1VUKSB7XG4gICAgICBhdXRoMC5sb2dvdXQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dERpc3BhdGNoKGFjdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB3aXRoRHluYW1pY1JlZHV4KHtcbiAgICBuYW1lLFxuICAgIHJlZHVjZXIsXG4gICAgbWlkZGxld2FyZSxcbiAgICBpbml0LFxuICB9KTtcbn07XG4iXX0=
