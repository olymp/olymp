import _get from 'lodash/get';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import createSchema from 'olymp-graphql/server';
import createMail from 'olymp-mail/server';
import { pagesGraphQL } from 'olymp-pages/server';
import { cloudinaryGraphQL } from 'olymp-cloudinary/server';
import { googleGraphQL } from 'olymp-google/server';
import { scrapeGraphQL } from 'olymp-scrape/server';
import auth0 from 'olymp-auth0/server';
import { MongoClient } from 'mongodb';
/* import createSitemap from 'olymp-sitemap/server'; */
import { modules as colModules, directives } from 'olymp-collection/server';

import algoliasearch from 'algoliasearch';

var querystring = require('querystring');

var parser = require('url');

var _process$env = process.env,
    APP = _process$env.APP,
    URL = _process$env.URL,
    MONGODB_URI = _process$env.MONGODB_URI,
    ALGOLIA = _process$env.ALGOLIA,
    POSTMARK_KEY = _process$env.POSTMARK_KEY,
    POSTMARK_FROM = _process$env.POSTMARK_FROM,
    CLOUDINARY_URI = _process$env.CLOUDINARY_URI,
    AUTH_SECRET = _process$env.AUTH_SECRET,
    NODE_ENV = _process$env.NODE_ENV,
    GOOGLE_MAPS_KEY = _process$env.GOOGLE_MAPS_KEY,
    GOOGLE_CLIENT_EMAIL = _process$env.GOOGLE_CLIENT_EMAIL,
    GOOGLE_PRIVATE_KEY = _process$env.GOOGLE_PRIVATE_KEY;


export default (function (server, options) {
  var db = null;

  var x1 = MONGODB_URI.split('?')[0];
  var x2 = MONGODB_URI.split('?')[1] || '';
  var op2 = querystring.parse(x2);
  new MongoClient(x1, _extends({}, op2, {
    ssl: !!op2.ssl
  })).connect(function (err, mongo) {
    if (err) {
      console.error(err);
      if (err.errors) {
        err.errors.forEach(function (err) {
          return console.error(err);
        });
      }
    }
    db = mongo.db(x1.split('/').pop());
  });

  auth0(server);

  var schema = createSchema({ directives: directives });
  var modules = _extends({
    helloWorld: {
      queries: '\n      helloWorld: String\n    ',
      resolvers: {
        queries: {
          helloWorld: function helloWorld() {
            return 'Hello World!';
          }
        }
      }
    },
    user: {
      schema: '\n        type User {\n          isAdmin: Boolean\n          id: String\n          email: Email\n          token: String\n          name: String\n        }\n      '
    }
  }, _get(options, 'modules', {}), colModules);
  var mail = createMail(POSTMARK_KEY, {
    from: POSTMARK_FROM,
    url: URL
  });

  var algolia = ALGOLIA ? algoliasearch(ALGOLIA.split('@')[1], ALGOLIA.split('@')[0]) : null;

  // const responseCache = createResponseCache();
  var cachedApp = null;

  server.getSchema = schema.getSchema;
  server.getDB = function () {
    return db;
  };
  server.use(function (req, res, next) {
    req.db = db;
    req.mail = mail;
    req.schema = schema.getSchema();
    req.app = APP ? { id: APP } : null;
    req.algolia = algolia;
    next();
  });

  modules.pages = pagesGraphQL();
  modules.cloudinary = cloudinaryGraphQL(CLOUDINARY_URI);
  modules.scrape = scrapeGraphQL();
  modules.google = googleGraphQL(GOOGLE_MAPS_KEY, GOOGLE_CLIENT_EMAIL, GOOGLE_PRIVATE_KEY);
  server.post('/graphql', schema.express);
  if (NODE_ENV !== 'production') {
    server.get('/graphql', schema.graphi);
  }
  schema.apply(modules);
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
