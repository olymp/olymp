import _upperFirst from 'lodash/upperFirst';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { visit, Kind } from 'graphql/language';
import createTypeFetcher from './fetch-type';
import addDefinition from './add-definition';

var fetch = createTypeFetcher(function (node, value) {
  return node.kind.endsWith('TypeDefinition') && node.name && node.name.value === value;
});

var transformASTTypeToInput = function transformASTTypeToInput(type, _ref) {
  var newName = _ref.newName,
      ast = _ref.ast,
      _ref$exclude = _ref.exclude,
      exclude = _ref$exclude === undefined ? [] : _ref$exclude,
      _ref$optional = _ref.optional,
      optional = _ref$optional === undefined ? [] : _ref$optional;
  var generatedInputHistory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  var definitions = ast.definitions || ast;
  return visit(type, {
    enter: function enter(node /* , key, parent, path, ancestors*/) {
      var copy = Object.assign({}, node);
      copy.directives = [];
      switch (copy.kind) {
        case Kind.OBJECT_TYPE_DEFINITION:
          copy.kind = Kind.INPUT_OBJECT_TYPE_DEFINITION;
          copy.name = Object.assign({}, copy.name);
          copy.name.value = newName;
          break;
        case Kind.FIELD_DEFINITION:
          if (exclude.indexOf(node.name.value) !== -1) {
            return null;
          } // Delete this node
          copy.kind = Kind.INPUT_VALUE_DEFINITION;
          var fieldName = copy.name.value;
          var typeName = null;
          visit(copy, _defineProperty({}, Kind.NAMED_TYPE, function (typeNode) {
            typeName = typeNode.name.value;
          }));
          var fieldType = fetch(ast, typeName);
          if (fieldType && fieldType.kind === Kind.OBJECT_TYPE_DEFINITION) {
            var inputName = _upperFirst(fieldType.name.value) + 'Input';
            if (generatedInputHistory.indexOf(inputName) === -1) {
              generatedInputHistory.push(inputName);
              if (!fetch(ast, inputName) && fieldType.name.value !== type.name.value) {
                var newInput = transformASTTypeToInput(fieldType, { newName: inputName, ast: ast }, generatedInputHistory);
                definitions.push(newInput);
              }
            }
            copy = visit(copy, _defineProperty({}, Kind.NAMED_TYPE, function (typeNode) {
              var newNode = Object.assign({}, typeNode);
              newNode.name = Object.assign({}, newNode.name);
              newNode.name.value = inputName;
              return newNode;
            }));
            if (optional.indexOf(fieldName) !== -1) {
              while (copy.type.kind === Kind.NON_NULL_TYPE) {
                copy.type = Object.assign({}, copy.type.type);
              }
            }
          }
          break;
      }
      return copy;
    }
  });
};

export default (function (ast, node) {
  var input = transformASTTypeToInput(node, {
    newName: node.name.value + 'Input',
    ast: ast.definitions
  });
  addDefinition(ast.definitions, input);
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
