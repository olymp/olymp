import _lowerFirst from 'lodash/lowerFirst';
import _set from 'lodash/set';
import _get from 'lodash/get';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import { addFields } from 'olymp-graphql/server';
import shortId from 'shortid';
import adaptQuery from './adapt-query';

export default (function (ast, node, resolvers, typeName, isGeneric) {
  var name = node.name.value;
  var table = _lowerFirst(typeName || name);

  var Query = ast.definitions.find(function (x) {
    return _get(x, 'name.value') === 'RootQuery';
  });

  if (Query) {
    // Add one query
    addFields(ast, Query, table + '(id: String, query: ' + name + 'Query, sort: ' + name + 'Sort): ' + name, {
      replace: false
    });
    if (!_get(resolvers, 'RootQuery.' + table)) {
      _set(resolvers, 'RootQuery.' + table, function (source, _ref, _ref2) {
        var id = _ref.id,
            query = _ref.query;
        var db = _ref2.db,
            app = _ref2.app;

        var x = id ? { id: id } : adaptQuery(query);
        var q = isGeneric ? _extends({}, x, { _appId: app.id }) : _extends({}, x, { _type: table, _appId: app.id });
        // db.collection(table).findOne(id ? { id } : adaptQuery(query))
        return db.collection('item').findOne(q);
      });
    }

    // Add list query
    addFields(ast, Query, table + 'List(query: ' + name + 'Query, sort: ' + name + 'Sort, limit: Int, skip: Int): [' + name + ']', { replace: false });
    if (!_get(resolvers, 'RootQuery.' + table + 'List')) {
      _set(resolvers, 'RootQuery.' + table + 'List', function (source, _ref3, _ref4) {
        var query = _ref3.query,
            sort = _ref3.sort,
            limit = _ref3.limit,
            skip = _ref3.skip;
        var db = _ref4.db,
            app = _ref4.app;


        var obj = sort || { name: 'ASC' };
        var sorting = Object.keys(obj).reduce(function (store, key) {
          store[key] = obj[key] === 'DESC' ? -1 : 1;
          return store;
        }, {});
        return db.collection('item').find(isGeneric ? _extends({}, adaptQuery(query), { _appId: app.id }) : _extends({}, adaptQuery(query), { _type: table, _appId: app.id }))
        // .sort(sorting)
        // .limit(limit || 100)
        // .skip(skip || 0)
        .toArray();
      });
    }
  }

  var Mutation = ast.definitions.find(function (x) {
    return _get(x, 'name.value') === 'RootMutation';
  });

  if (Mutation) {
    // Add mutation
    addFields(ast, Mutation, table + '(id: String, type: MUTATION_TYPE, input: ' + name + 'Input): ' + name, { replace: false });
    if (!_get(resolvers, 'RootMutation.' + table)) {
      _set(resolvers, 'RootMutation.' + table,
      /* (source, { id, input, type }, { db }) => {
        if (!id) {
          db.collection(table).insert(input);
        } else if (type === 'REPLACE') {
          db.collection(table).update(input);
        } else {
          db.collection(table).update({ $set: input });
        }
      } */
      function (source, _ref5, _ref6) {
        var id = _ref5.id,
            input = _ref5.input,
            type = _ref5.type;
        var db = _ref6.db,
            app = _ref6.app;

        var promise = void 0;
        if (!id) {
          id = shortId.generate();
          promise = db.collection('item').insertOne(_extends({}, input, { _type: table, _appId: app.id, id: id }));
        } else if (type === 'REMOVE') {
          promise = db.collection('item').updateOne({ _type: table, id: id }, _extends({}, input, { state: 'REMOVED' }));
        } else if (type === 'REPLACE') {
          promise = db.collection('item').updateOne({ _type: table, id: id }, _extends({}, input, { _type: table, _appId: app.id, id: id }));
        } else {
          promise = db.collection('item').updateOne({ _type: table, id: id }, { $set: _extends({}, input) });
        }
        return promise.then(function () {
          return db.collection('item').findOne({ id: id, _type: table });
        });
      });
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
