var _require$promisifyAll = require('bluebird').promisifyAll(require('crypto')),
    randomBytesAsync = _require$promisifyAll.randomBytesAsync,
    pbkdf2Async = _require$promisifyAll.pbkdf2Async;

export default (function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var SALT_LENGTH = config.saltLength || 32;
  var KEY_LENGTH = config.keyLength || 128; // more
  var ITERATIONS = config.iterations || 4096; // more.. http://stackoverflow.com/questions/6054082/recommended-of-iterations-when-using-pbkdf2-sha256

  var setPassword = function setPassword(user, password) {
    if (!password) {
      throw new Error('Missing password');
    }
    return randomBytesAsync(SALT_LENGTH).then(function (salt) {
      return salt.toString('hex');
    }).then(function (salt) {
      user.salt = salt;
      return pbkdf2Async(password, salt, ITERATIONS, KEY_LENGTH, 'SHA1');
    }).then(function (crypt) {
      user.hash = new Buffer(crypt, 'binary').toString('hex');
      return user;
    });
  };

  var matchPassword = function matchPassword(user, password) {
    console.log(user, password);
    if (!password) {
      throw new Error('Missing password');
    }
    return pbkdf2Async(password, user.salt, ITERATIONS, KEY_LENGTH, 'SHA1').then(function (crypt) {
      return new Buffer(crypt, 'binary').toString('hex') === user.hash;
    });
  };

  return { set: setPassword, match: matchPassword };
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL2F1dGgvc2VydmVyL3V0aWxzL3Bhc3N3b3JkLWVuZ2luZS5lczYiXSwibmFtZXMiOlsicmVxdWlyZSIsInByb21pc2lmeUFsbCIsInJhbmRvbUJ5dGVzQXN5bmMiLCJwYmtkZjJBc3luYyIsImNvbmZpZyIsIlNBTFRfTEVOR1RIIiwic2FsdExlbmd0aCIsIktFWV9MRU5HVEgiLCJrZXlMZW5ndGgiLCJJVEVSQVRJT05TIiwiaXRlcmF0aW9ucyIsInNldFBhc3N3b3JkIiwidXNlciIsInBhc3N3b3JkIiwiRXJyb3IiLCJ0aGVuIiwic2FsdCIsInRvU3RyaW5nIiwiaGFzaCIsIkJ1ZmZlciIsImNyeXB0IiwibWF0Y2hQYXNzd29yZCIsImNvbnNvbGUiLCJsb2ciLCJzZXQiLCJtYXRjaCJdLCJtYXBwaW5ncyI6IjRCQUEwQ0EsUUFBUSxVQUFSLEVBQW9CQyxZQUFwQixDQUN4Q0QsUUFBUSxRQUFSLENBRHdDLEM7SUFBbENFLGdCLHlCQUFBQSxnQjtJQUFrQkMsVyx5QkFBQUEsVzs7QUFJMUIsZ0JBQWUsWUFBaUI7QUFBQSxNQUFoQkMsTUFBZ0IsdUVBQVAsRUFBTzs7QUFDOUIsTUFBTUMsY0FBY0QsT0FBT0UsVUFBUCxJQUFxQixFQUF6QztBQUNBLE1BQU1DLGFBQWFILE9BQU9JLFNBQVAsSUFBb0IsR0FBdkMsQ0FGOEIsQ0FFYztBQUM1QyxNQUFNQyxhQUFhTCxPQUFPTSxVQUFQLElBQXFCLElBQXhDLENBSDhCLENBR2dCOztBQUU5QyxNQUFNQyxjQUFjLFNBQWRBLFdBQWMsQ0FBQ0MsSUFBRCxFQUFPQyxRQUFQLEVBQW9CO0FBQ3RDLFFBQUksQ0FBQ0EsUUFBTCxFQUFlO0FBQ2IsWUFBTSxJQUFJQyxLQUFKLENBQVUsa0JBQVYsQ0FBTjtBQUNEO0FBQ0QsV0FBT1osaUJBQWlCRyxXQUFqQixFQUNKVSxJQURJLENBQ0M7QUFBQSxhQUFRQyxLQUFLQyxRQUFMLENBQWMsS0FBZCxDQUFSO0FBQUEsS0FERCxFQUVKRixJQUZJLENBRUMsZ0JBQVE7QUFDWkgsV0FBS0ksSUFBTCxHQUFZQSxJQUFaO0FBQ0EsYUFBT2IsWUFBWVUsUUFBWixFQUFzQkcsSUFBdEIsRUFBNEJQLFVBQTVCLEVBQXdDRixVQUF4QyxFQUFvRCxNQUFwRCxDQUFQO0FBQ0QsS0FMSSxFQU1KUSxJQU5JLENBTUMsaUJBQVM7QUFDYkgsV0FBS00sSUFBTCxHQUFZLElBQUlDLE1BQUosQ0FBV0MsS0FBWCxFQUFrQixRQUFsQixFQUE0QkgsUUFBNUIsQ0FBcUMsS0FBckMsQ0FBWjtBQUNBLGFBQU9MLElBQVA7QUFDRCxLQVRJLENBQVA7QUFVRCxHQWREOztBQWdCQSxNQUFNUyxnQkFBZ0IsU0FBaEJBLGFBQWdCLENBQUNULElBQUQsRUFBT0MsUUFBUCxFQUFvQjtBQUN4Q1MsWUFBUUMsR0FBUixDQUFZWCxJQUFaLEVBQWtCQyxRQUFsQjtBQUNBLFFBQUksQ0FBQ0EsUUFBTCxFQUFlO0FBQ2IsWUFBTSxJQUFJQyxLQUFKLENBQVUsa0JBQVYsQ0FBTjtBQUNEO0FBQ0QsV0FBT1gsWUFDTFUsUUFESyxFQUVMRCxLQUFLSSxJQUZBLEVBR0xQLFVBSEssRUFJTEYsVUFKSyxFQUtMLE1BTEssRUFNTFEsSUFOSyxDQU1BO0FBQUEsYUFBUyxJQUFJSSxNQUFKLENBQVdDLEtBQVgsRUFBa0IsUUFBbEIsRUFBNEJILFFBQTVCLENBQXFDLEtBQXJDLE1BQWdETCxLQUFLTSxJQUE5RDtBQUFBLEtBTkEsQ0FBUDtBQU9ELEdBWkQ7O0FBY0EsU0FBTyxFQUFFTSxLQUFLYixXQUFQLEVBQW9CYyxPQUFPSixhQUEzQixFQUFQO0FBQ0QsQ0FwQ0QiLCJmaWxlIjoicGFja2FnZXMvYXV0aC9zZXJ2ZXIvdXRpbHMvcGFzc3dvcmQtZW5naW5lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyByYW5kb21CeXRlc0FzeW5jLCBwYmtkZjJBc3luYyB9ID0gcmVxdWlyZSgnYmx1ZWJpcmQnKS5wcm9taXNpZnlBbGwoXG4gIHJlcXVpcmUoJ2NyeXB0bycpLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgKGNvbmZpZyA9IHt9KSA9PiB7XG4gIGNvbnN0IFNBTFRfTEVOR1RIID0gY29uZmlnLnNhbHRMZW5ndGggfHwgMzI7XG4gIGNvbnN0IEtFWV9MRU5HVEggPSBjb25maWcua2V5TGVuZ3RoIHx8IDEyODsgLy8gbW9yZVxuICBjb25zdCBJVEVSQVRJT05TID0gY29uZmlnLml0ZXJhdGlvbnMgfHwgNDA5NjsgLy8gbW9yZS4uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjA1NDA4Mi9yZWNvbW1lbmRlZC1vZi1pdGVyYXRpb25zLXdoZW4tdXNpbmctcGJrZGYyLXNoYTI1NlxuXG4gIGNvbnN0IHNldFBhc3N3b3JkID0gKHVzZXIsIHBhc3N3b3JkKSA9PiB7XG4gICAgaWYgKCFwYXNzd29yZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHBhc3N3b3JkJyk7XG4gICAgfVxuICAgIHJldHVybiByYW5kb21CeXRlc0FzeW5jKFNBTFRfTEVOR1RIKVxuICAgICAgLnRoZW4oc2FsdCA9PiBzYWx0LnRvU3RyaW5nKCdoZXgnKSlcbiAgICAgIC50aGVuKHNhbHQgPT4ge1xuICAgICAgICB1c2VyLnNhbHQgPSBzYWx0O1xuICAgICAgICByZXR1cm4gcGJrZGYyQXN5bmMocGFzc3dvcmQsIHNhbHQsIElURVJBVElPTlMsIEtFWV9MRU5HVEgsICdTSEExJyk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oY3J5cHQgPT4ge1xuICAgICAgICB1c2VyLmhhc2ggPSBuZXcgQnVmZmVyKGNyeXB0LCAnYmluYXJ5JykudG9TdHJpbmcoJ2hleCcpO1xuICAgICAgICByZXR1cm4gdXNlcjtcbiAgICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IG1hdGNoUGFzc3dvcmQgPSAodXNlciwgcGFzc3dvcmQpID0+IHtcbiAgICBjb25zb2xlLmxvZyh1c2VyLCBwYXNzd29yZCk7XG4gICAgaWYgKCFwYXNzd29yZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHBhc3N3b3JkJyk7XG4gICAgfVxuICAgIHJldHVybiBwYmtkZjJBc3luYyhcbiAgICAgIHBhc3N3b3JkLFxuICAgICAgdXNlci5zYWx0LFxuICAgICAgSVRFUkFUSU9OUyxcbiAgICAgIEtFWV9MRU5HVEgsXG4gICAgICAnU0hBMScsXG4gICAgKS50aGVuKGNyeXB0ID0+IG5ldyBCdWZmZXIoY3J5cHQsICdiaW5hcnknKS50b1N0cmluZygnaGV4JykgPT09IHVzZXIuaGFzaCk7XG4gIH07XG5cbiAgcmV0dXJuIHsgc2V0OiBzZXRQYXNzd29yZCwgbWF0Y2g6IG1hdGNoUGFzc3dvcmQgfTtcbn07XG4iXX0=
