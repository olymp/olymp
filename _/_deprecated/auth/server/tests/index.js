process.env.AUTH_SECRET = 'qokpw212';
process.env.TEST = true;
process.env.GCLOUD_PROJECT = 'admn-usc';
process.env.MAILS = true;

var adapter = require('powr-datastore')();
var handler = require('../lib/handler')();
var data = { email: 'bkniffler@me.com', password: 'asd', realm: 'admn' };

var register = function register(payload) {
  return handler.auth({
    method: 'register',
    payload: Object.assign(payload, {
      // _noEmail: true
    })
  }, {}).then(function (x) {
    console.log('register ok');
    return x;
  });
};

var login = function login(password, realm) {
  return function (payload) {
    return handler.auth({
      method: 'login',
      payload: {
        email: payload.user.email,
        password: password,
        realm: realm
      }
    }, {}).then(function (x) {
      console.log('login ok');
      return x;
    });
  };
};

var verify = function verify(payload) {
  return handler.auth({
    method: 'verify',
    payload: {
      token: payload.token
    }
  }, {}).then(function (x) {
    console.log('verify ok');
    return x;
  });
};

var checkConfirmAfterRegister = function checkConfirmAfterRegister(payload) {
  if (payload.user.confirmed !== false) {
    throw new Error('Confirmed is not false');
  }
  console.log('check-confirm-after-register ok');
  return payload;
};

var checkConfirmAfterConfirm = function checkConfirmAfterConfirm(payload) {
  if (payload.user.confirmed !== true) {
    throw new Error('Confirmed is not true');
  }
  console.log('check-confirm-after-confirm ok');
  return payload;
};

var confirm = function confirm(payload) {
  return handler.auth({
    method: 'confirm',
    payload: {
      token: payload.token
    }
  }, {}).then(function (x) {
    console.log('authenticate ok');
    return x;
  });
};

var registrationTest = function registrationTest() {
  console.log(' ---- starting registration-test ----');
  return register({
    email: data.email,
    password: data.password,
    realm: data.realm
  }).then(checkConfirmAfterRegister).then(confirm).then(checkConfirmAfterConfirm).then(login(data.password, data.realm)).then(verify).then(function (result) {
    return console.log(' => registration-test ok\n');
  }).catch(function (err) {
    return console.error(err);
  });
};

registrationTest();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL2F1dGgvc2VydmVyL3Rlc3RzL2luZGV4LmVzNiJdLCJuYW1lcyI6WyJwcm9jZXNzIiwiZW52IiwiQVVUSF9TRUNSRVQiLCJURVNUIiwiR0NMT1VEX1BST0pFQ1QiLCJNQUlMUyIsImFkYXB0ZXIiLCJyZXF1aXJlIiwiaGFuZGxlciIsImRhdGEiLCJlbWFpbCIsInBhc3N3b3JkIiwicmVhbG0iLCJyZWdpc3RlciIsImF1dGgiLCJtZXRob2QiLCJwYXlsb2FkIiwiT2JqZWN0IiwiYXNzaWduIiwidGhlbiIsIngiLCJjb25zb2xlIiwibG9nIiwibG9naW4iLCJ1c2VyIiwidmVyaWZ5IiwidG9rZW4iLCJjaGVja0NvbmZpcm1BZnRlclJlZ2lzdGVyIiwiY29uZmlybWVkIiwiRXJyb3IiLCJjaGVja0NvbmZpcm1BZnRlckNvbmZpcm0iLCJjb25maXJtIiwicmVnaXN0cmF0aW9uVGVzdCIsImNhdGNoIiwiZXJyb3IiLCJlcnIiXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFRQyxHQUFSLENBQVlDLFdBQVosR0FBMEIsVUFBMUI7QUFDQUYsUUFBUUMsR0FBUixDQUFZRSxJQUFaLEdBQW1CLElBQW5CO0FBQ0FILFFBQVFDLEdBQVIsQ0FBWUcsY0FBWixHQUE2QixVQUE3QjtBQUNBSixRQUFRQyxHQUFSLENBQVlJLEtBQVosR0FBb0IsSUFBcEI7O0FBRUEsSUFBTUMsVUFBVUMsUUFBUSxnQkFBUixHQUFoQjtBQUNBLElBQU1DLFVBQVVELFFBQVEsZ0JBQVIsR0FBaEI7QUFDQSxJQUFNRSxPQUFPLEVBQUVDLE9BQU8sa0JBQVQsRUFBNkJDLFVBQVUsS0FBdkMsRUFBOENDLE9BQU8sTUFBckQsRUFBYjs7QUFFQSxJQUFNQyxXQUFXLFNBQVhBLFFBQVc7QUFBQSxTQUNmTCxRQUNHTSxJQURILENBRUU7QUFDRUMsWUFBUSxVQURWO0FBRUVDLGFBQVNDLE9BQU9DLE1BQVAsQ0FDTEYsT0FESyxFQUVQO0FBQ0k7QUFESixLQUZPO0FBRlgsR0FGRixFQVdJLEVBWEosRUFhR0csSUFiSCxDQWFRLFVBQUNDLENBQUQsRUFBTztBQUNYQyxZQUFRQyxHQUFSLENBQVksYUFBWjtBQUNBLFdBQU9GLENBQVA7QUFDRCxHQWhCSCxDQURlO0FBQUEsQ0FBakI7O0FBbUJBLElBQU1HLFFBQVEsU0FBUkEsS0FBUSxDQUFDWixRQUFELEVBQVdDLEtBQVg7QUFBQSxTQUFxQjtBQUFBLFdBQ2pDSixRQUNHTSxJQURILENBRUU7QUFDRUMsY0FBUSxPQURWO0FBRUVDLGVBQVM7QUFDUE4sZUFBT00sUUFBUVEsSUFBUixDQUFhZCxLQURiO0FBRVBDLDBCQUZPO0FBR1BDO0FBSE87QUFGWCxLQUZGLEVBVUksRUFWSixFQVlHTyxJQVpILENBWVEsVUFBQ0MsQ0FBRCxFQUFPO0FBQ1hDLGNBQVFDLEdBQVIsQ0FBWSxVQUFaO0FBQ0EsYUFBT0YsQ0FBUDtBQUNELEtBZkgsQ0FEaUM7QUFBQSxHQUFyQjtBQUFBLENBQWQ7O0FBa0JBLElBQU1LLFNBQVMsU0FBVEEsTUFBUztBQUFBLFNBQ2JqQixRQUNHTSxJQURILENBRUU7QUFDRUMsWUFBUSxRQURWO0FBRUVDLGFBQVM7QUFDUFUsYUFBT1YsUUFBUVU7QUFEUjtBQUZYLEdBRkYsRUFRSSxFQVJKLEVBVUdQLElBVkgsQ0FVUSxVQUFDQyxDQUFELEVBQU87QUFDWEMsWUFBUUMsR0FBUixDQUFZLFdBQVo7QUFDQSxXQUFPRixDQUFQO0FBQ0QsR0FiSCxDQURhO0FBQUEsQ0FBZjs7QUFnQkEsSUFBTU8sNEJBQTRCLFNBQTVCQSx5QkFBNEIsQ0FBQ1gsT0FBRCxFQUFhO0FBQzdDLE1BQUlBLFFBQVFRLElBQVIsQ0FBYUksU0FBYixLQUEyQixLQUEvQixFQUFzQztBQUFFLFVBQU0sSUFBSUMsS0FBSixDQUFVLHdCQUFWLENBQU47QUFBNEM7QUFDcEZSLFVBQVFDLEdBQVIsQ0FBWSxpQ0FBWjtBQUNBLFNBQU9OLE9BQVA7QUFDRCxDQUpEOztBQU1BLElBQU1jLDJCQUEyQixTQUEzQkEsd0JBQTJCLENBQUNkLE9BQUQsRUFBYTtBQUM1QyxNQUFJQSxRQUFRUSxJQUFSLENBQWFJLFNBQWIsS0FBMkIsSUFBL0IsRUFBcUM7QUFBRSxVQUFNLElBQUlDLEtBQUosQ0FBVSx1QkFBVixDQUFOO0FBQTJDO0FBQ2xGUixVQUFRQyxHQUFSLENBQVksZ0NBQVo7QUFDQSxTQUFPTixPQUFQO0FBQ0QsQ0FKRDs7QUFNQSxJQUFNZSxVQUFVLFNBQVZBLE9BQVU7QUFBQSxTQUNkdkIsUUFDR00sSUFESCxDQUVFO0FBQ0VDLFlBQVEsU0FEVjtBQUVFQyxhQUFTO0FBQ1BVLGFBQU9WLFFBQVFVO0FBRFI7QUFGWCxHQUZGLEVBUUksRUFSSixFQVVHUCxJQVZILENBVVEsVUFBQ0MsQ0FBRCxFQUFPO0FBQ1hDLFlBQVFDLEdBQVIsQ0FBWSxpQkFBWjtBQUNBLFdBQU9GLENBQVA7QUFDRCxHQWJILENBRGM7QUFBQSxDQUFoQjs7QUFnQkEsSUFBTVksbUJBQW1CLFNBQW5CQSxnQkFBbUIsR0FBTTtBQUM3QlgsVUFBUUMsR0FBUixDQUFZLHVDQUFaO0FBQ0EsU0FBT1QsU0FBUztBQUNkSCxXQUFPRCxLQUFLQyxLQURFO0FBRWRDLGNBQVVGLEtBQUtFLFFBRkQ7QUFHZEMsV0FBT0gsS0FBS0c7QUFIRSxHQUFULEVBS0pPLElBTEksQ0FLQ1EseUJBTEQsRUFNSlIsSUFOSSxDQU1DWSxPQU5ELEVBT0paLElBUEksQ0FPQ1csd0JBUEQsRUFRSlgsSUFSSSxDQVFDSSxNQUFNZCxLQUFLRSxRQUFYLEVBQXFCRixLQUFLRyxLQUExQixDQVJELEVBU0pPLElBVEksQ0FTQ00sTUFURCxFQVVKTixJQVZJLENBVUM7QUFBQSxXQUFVRSxRQUFRQyxHQUFSLENBQVksNEJBQVosQ0FBVjtBQUFBLEdBVkQsRUFXSlcsS0FYSSxDQVdFO0FBQUEsV0FBT1osUUFBUWEsS0FBUixDQUFjQyxHQUFkLENBQVA7QUFBQSxHQVhGLENBQVA7QUFZRCxDQWREOztBQWdCQUgiLCJmaWxlIjoicGFja2FnZXMvYXV0aC9zZXJ2ZXIvdGVzdHMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJwcm9jZXNzLmVudi5BVVRIX1NFQ1JFVCA9ICdxb2twdzIxMic7XG5wcm9jZXNzLmVudi5URVNUID0gdHJ1ZTtcbnByb2Nlc3MuZW52LkdDTE9VRF9QUk9KRUNUID0gJ2FkbW4tdXNjJztcbnByb2Nlc3MuZW52Lk1BSUxTID0gdHJ1ZTtcblxuY29uc3QgYWRhcHRlciA9IHJlcXVpcmUoJ3Bvd3ItZGF0YXN0b3JlJykoKTtcbmNvbnN0IGhhbmRsZXIgPSByZXF1aXJlKCcuLi9saWIvaGFuZGxlcicpKCk7XG5jb25zdCBkYXRhID0geyBlbWFpbDogJ2JrbmlmZmxlckBtZS5jb20nLCBwYXNzd29yZDogJ2FzZCcsIHJlYWxtOiAnYWRtbicgfTtcblxuY29uc3QgcmVnaXN0ZXIgPSBwYXlsb2FkID0+XG4gIGhhbmRsZXJcbiAgICAuYXV0aChcbiAgICB7XG4gICAgICBtZXRob2Q6ICdyZWdpc3RlcicsXG4gICAgICBwYXlsb2FkOiBPYmplY3QuYXNzaWduKFxuICAgICAgICAgIHBheWxvYWQsXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIF9ub0VtYWlsOiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgKSxcbiAgICB9LFxuICAgICAge31cbiAgICApXG4gICAgLnRoZW4oKHgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdyZWdpc3RlciBvaycpO1xuICAgICAgcmV0dXJuIHg7XG4gICAgfSk7XG5cbmNvbnN0IGxvZ2luID0gKHBhc3N3b3JkLCByZWFsbSkgPT4gcGF5bG9hZCA9PlxuICBoYW5kbGVyXG4gICAgLmF1dGgoXG4gICAge1xuICAgICAgbWV0aG9kOiAnbG9naW4nLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBlbWFpbDogcGF5bG9hZC51c2VyLmVtYWlsLFxuICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgcmVhbG0sXG4gICAgICB9LFxuICAgIH0sXG4gICAgICB7fVxuICAgIClcbiAgICAudGhlbigoeCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2xvZ2luIG9rJyk7XG4gICAgICByZXR1cm4geDtcbiAgICB9KTtcblxuY29uc3QgdmVyaWZ5ID0gcGF5bG9hZCA9PlxuICBoYW5kbGVyXG4gICAgLmF1dGgoXG4gICAge1xuICAgICAgbWV0aG9kOiAndmVyaWZ5JyxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgdG9rZW46IHBheWxvYWQudG9rZW4sXG4gICAgICB9LFxuICAgIH0sXG4gICAgICB7fVxuICAgIClcbiAgICAudGhlbigoeCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ3ZlcmlmeSBvaycpO1xuICAgICAgcmV0dXJuIHg7XG4gICAgfSk7XG5cbmNvbnN0IGNoZWNrQ29uZmlybUFmdGVyUmVnaXN0ZXIgPSAocGF5bG9hZCkgPT4ge1xuICBpZiAocGF5bG9hZC51c2VyLmNvbmZpcm1lZCAhPT0gZmFsc2UpIHsgdGhyb3cgbmV3IEVycm9yKCdDb25maXJtZWQgaXMgbm90IGZhbHNlJyk7IH1cbiAgY29uc29sZS5sb2coJ2NoZWNrLWNvbmZpcm0tYWZ0ZXItcmVnaXN0ZXIgb2snKTtcbiAgcmV0dXJuIHBheWxvYWQ7XG59O1xuXG5jb25zdCBjaGVja0NvbmZpcm1BZnRlckNvbmZpcm0gPSAocGF5bG9hZCkgPT4ge1xuICBpZiAocGF5bG9hZC51c2VyLmNvbmZpcm1lZCAhPT0gdHJ1ZSkgeyB0aHJvdyBuZXcgRXJyb3IoJ0NvbmZpcm1lZCBpcyBub3QgdHJ1ZScpOyB9XG4gIGNvbnNvbGUubG9nKCdjaGVjay1jb25maXJtLWFmdGVyLWNvbmZpcm0gb2snKTtcbiAgcmV0dXJuIHBheWxvYWQ7XG59O1xuXG5jb25zdCBjb25maXJtID0gcGF5bG9hZCA9PlxuICBoYW5kbGVyXG4gICAgLmF1dGgoXG4gICAge1xuICAgICAgbWV0aG9kOiAnY29uZmlybScsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIHRva2VuOiBwYXlsb2FkLnRva2VuLFxuICAgICAgfSxcbiAgICB9LFxuICAgICAge31cbiAgICApXG4gICAgLnRoZW4oKHgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdhdXRoZW50aWNhdGUgb2snKTtcbiAgICAgIHJldHVybiB4O1xuICAgIH0pO1xuXG5jb25zdCByZWdpc3RyYXRpb25UZXN0ID0gKCkgPT4ge1xuICBjb25zb2xlLmxvZygnIC0tLS0gc3RhcnRpbmcgcmVnaXN0cmF0aW9uLXRlc3QgLS0tLScpO1xuICByZXR1cm4gcmVnaXN0ZXIoe1xuICAgIGVtYWlsOiBkYXRhLmVtYWlsLFxuICAgIHBhc3N3b3JkOiBkYXRhLnBhc3N3b3JkLFxuICAgIHJlYWxtOiBkYXRhLnJlYWxtLFxuICB9KVxuICAgIC50aGVuKGNoZWNrQ29uZmlybUFmdGVyUmVnaXN0ZXIpXG4gICAgLnRoZW4oY29uZmlybSlcbiAgICAudGhlbihjaGVja0NvbmZpcm1BZnRlckNvbmZpcm0pXG4gICAgLnRoZW4obG9naW4oZGF0YS5wYXNzd29yZCwgZGF0YS5yZWFsbSkpXG4gICAgLnRoZW4odmVyaWZ5KVxuICAgIC50aGVuKHJlc3VsdCA9PiBjb25zb2xlLmxvZygnID0+IHJlZ2lzdHJhdGlvbi10ZXN0IG9rXFxuJykpXG4gICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKGVycikpO1xufTtcblxucmVnaXN0cmF0aW9uVGVzdCgpO1xuIl19
