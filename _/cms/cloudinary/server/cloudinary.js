'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var cloudinary = require('cloudinary');
var lodash = require('lodash');

var APP = process.env.APP;
var parseURI = exports.parseURI = function parseURI(uri) {
  var config = {};
  if (uri) {
    var split1 = uri.split('@');
    var split2 = split1[0].split('://');
    var split3 = split2[1].split(':');
    config.cloud_name = split1[1];
    config.api_key = split3[0];
    config.api_secret = split3[1];
    cloudinary.config(config);
  }

  return config;
};

var transform = exports.transform = function transform(image) {
  var newImage = {};
  Object.keys(image).forEach(function (key) {
    var originalKey = key;
    key = lodash.camelCase(key);
    if (key === 'publicId') {
      newImage.publicId = image.public_id;
      return;
    } else if (key === 'secureUrl') {
      return;
    } else if (key === 'url') {
      newImage.url = image.secure_url || image.url;
      return;
    } else if (key === 'colors') {
      return;
    } else if (key === 'context' && image[key].custom) {
      newImage.caption = image[key].custom.caption;
      newImage.source = image[key].custom.source;
      newImage.removed = image[key].custom.removed;
      return;
    } else if (key === 'predominant') {
      // Geht nur bei Single Pictures!!!
      newImage.colors = image.predominant.google.map(function (x) {
        return x[0];
      });
      return;
    } else if (key === 'pages') {
      // Geht nur bei Single Pictures und PDFs!!!
      newImage.pages = image.pages;
      return;
    }
    if (['id', 'format', 'version', 'resourceType', 'type', 'createdAt', 'height', 'width', 'bytes', 'url', 'caption', 'source', 'removed', 'pages', 'colors', 'tags'].indexOf(key) !== -1) {
      newImage[key] = image[key];
    }
  });
  return newImage;
};

var transformSignature = exports.transformSignature = function transformSignature(_ref, _ref2) {
  var cloud_name = _ref.cloud_name;
  var signature = _ref2.signature,
      api_key = _ref2.api_key,
      timestamp = _ref2.timestamp,
      folder = _ref2.folder;
  return {
    url: 'https://api.cloudinary.com/v1_1/' + cloud_name + '/auto/upload', // eslint-disable-line
    signature: signature,
    folder: folder,
    timestamp: timestamp,
    apiKey: api_key
  };
};

var getImages = exports.getImages = function getImages(config) {
  var images = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var nextCursor = arguments[2];
  return new Promise(function (yay, nay) {
    cloudinary.api.resources(function (result) {
      if (result.error) {
        return nay(result.error);
      }

      // Aktuelle Bilder an Ausgabe-Array anh√§ngen (max 500)
      var results = result.resources && result.resources.length ? images.concat(result.resources.map(transform)) : [];

      // Falls noch weitere Bilder in Mediathek sind, diese auch laden
      if (result.next_cursor) {
        console.error('WARNING, MORE THAN 500 IMAGES!');
        return getImages(config, results, result.next_cursor).then(yay);
      }
      return yay(results);
    }, Object.assign({}, config, {
      tags: true,
      context: true,
      type: 'upload',
      colors: true,
      max_results: 500,
      next_cursor: nextCursor,
      prefix: APP && APP !== 'gzk' ? APP + '/' : ''
    }));
  });
};

var getImageById = exports.getImageById = function getImageById(config, id) {
  return new Promise(function (yay) {
    return cloudinary.api.resource(id, function (result) {
      yay(result);
    }, Object.assign({}, config, {
      tags: true,
      context: true,
      type: 'upload',
      colors: true,
      pages: true,
      prefix: APP && APP !== 'gzk' ? APP + '/' : ''
    }));
  }).then(transform);
};

var getSignedRequest = exports.getSignedRequest = function getSignedRequest(config) {
  return transformSignature(config, cloudinary.utils.sign_request({
    timestamp: Math.round(new Date().getTime() / 1000),
    folder: APP ? APP + '/' : null
  }, config));
};

var updateImage = exports.updateImage = function updateImage(id, tags, source, caption, config, removed) {
  var context = [];

  if (source) {
    context.push('source=' + source);
  }

  if (caption) {
    context.push('caption=' + caption);
  }

  if (removed) {
    context.push('removed=true');
  }

  return new Promise(function (yay) {
    cloudinary.api.update(id, function (result) {
      return yay(result);
    }, Object.assign({}, config, {
      prefix: APP ? APP + '/' : '',
      tags: (tags || []).join(','),
      context: context.join('|')
    }));
  }).then(transform);
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
