var SitemapGenerator = require('./builder');
var fs = require('fs');
var path = require('path');

var defaultHook = function defaultHook(source, args, context) {
  if (!context.user) {
    throw new Error('Must be authenticated');
  }
  return Promise.resolve(args);
};
var regenerateSitemap = function regenerateSitemap() {
  return new Promise(function (yay, nay) {
    var generator = new SitemapGenerator(process.env.URL);
    generator.on('done', function (sitemap) {
      yay(sitemap.split('%C3%A4').join('ä').split('%C3%B6').join('ö').split('%C3%BC').join('ü').split('%C3%A4').join('Ä').split('%C3%B6').join('Ö').split('%C3%BC').join('Ü'));
    });
    generator.on('clienterror', function (queueError, errorData) {
      nay(queueError);
    });
    generator.start();
  });
};
var writeSitemap = function writeSitemap(sitemap) {
  return new Promise(function (yay, nay) {
    fs.writeFile(path.resolve(process.cwd(), 'public', 'sitemap.xml'), sitemap, function (err) {
      if (err) {
        nay(err);
      } else {
        yay(true);
      }
    });
  });
};

export default (function (schema) {
  schema.addSchema({
    name: 'sitemap',
    mutation: '\n      createSitemap: Boolean\n    ',
    resolvers: {
      mutations: {
        createSitemap: function createSitemap(source, args, context) {
          var hook = Mutation && Mutation.page ? Mutation.page : defaultHook;
          return hook(source, Object.assign({}, args), context).then(regenerateSitemap).then(writeSitemap);
        }
      }
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL3NpdGVtYXAvc2VydmVyL2luZGV4LmVzNiJdLCJuYW1lcyI6WyJTaXRlbWFwR2VuZXJhdG9yIiwicmVxdWlyZSIsImZzIiwicGF0aCIsImRlZmF1bHRIb29rIiwic291cmNlIiwiYXJncyIsImNvbnRleHQiLCJ1c2VyIiwiRXJyb3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlZ2VuZXJhdGVTaXRlbWFwIiwieWF5IiwibmF5IiwiZ2VuZXJhdG9yIiwicHJvY2VzcyIsImVudiIsIlVSTCIsIm9uIiwic2l0ZW1hcCIsInNwbGl0Iiwiam9pbiIsInF1ZXVlRXJyb3IiLCJlcnJvckRhdGEiLCJzdGFydCIsIndyaXRlU2l0ZW1hcCIsIndyaXRlRmlsZSIsImN3ZCIsImVyciIsInNjaGVtYSIsImFkZFNjaGVtYSIsIm5hbWUiLCJtdXRhdGlvbiIsInJlc29sdmVycyIsIm11dGF0aW9ucyIsImNyZWF0ZVNpdGVtYXAiLCJob29rIiwiTXV0YXRpb24iLCJwYWdlIiwiT2JqZWN0IiwiYXNzaWduIiwidGhlbiJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTUEsbUJBQW1CQyxRQUFRLFdBQVIsQ0FBekI7QUFDQSxJQUFNQyxLQUFLRCxRQUFRLElBQVIsQ0FBWDtBQUNBLElBQU1FLE9BQU9GLFFBQVEsTUFBUixDQUFiOztBQUVBLElBQU1HLGNBQWMsU0FBZEEsV0FBYyxDQUFDQyxNQUFELEVBQVNDLElBQVQsRUFBZUMsT0FBZixFQUEyQjtBQUM3QyxNQUFJLENBQUNBLFFBQVFDLElBQWIsRUFBbUI7QUFDakIsVUFBTSxJQUFJQyxLQUFKLENBQVUsdUJBQVYsQ0FBTjtBQUNEO0FBQ0QsU0FBT0MsUUFBUUMsT0FBUixDQUFnQkwsSUFBaEIsQ0FBUDtBQUNELENBTEQ7QUFNQSxJQUFNTSxvQkFBb0IsU0FBcEJBLGlCQUFvQjtBQUFBLFNBQ3hCLElBQUlGLE9BQUosQ0FBWSxVQUFDRyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUN4QixRQUFNQyxZQUFZLElBQUlmLGdCQUFKLENBQXFCZ0IsUUFBUUMsR0FBUixDQUFZQyxHQUFqQyxDQUFsQjtBQUNBSCxjQUFVSSxFQUFWLENBQWEsTUFBYixFQUFxQixVQUFDQyxPQUFELEVBQWE7QUFDaENQLFVBQ0VPLFFBQ0dDLEtBREgsQ0FDUyxRQURULEVBRUdDLElBRkgsQ0FFUSxHQUZSLEVBR0dELEtBSEgsQ0FHUyxRQUhULEVBSUdDLElBSkgsQ0FJUSxHQUpSLEVBS0dELEtBTEgsQ0FLUyxRQUxULEVBTUdDLElBTkgsQ0FNUSxHQU5SLEVBT0dELEtBUEgsQ0FPUyxRQVBULEVBUUdDLElBUkgsQ0FRUSxHQVJSLEVBU0dELEtBVEgsQ0FTUyxRQVRULEVBVUdDLElBVkgsQ0FVUSxHQVZSLEVBV0dELEtBWEgsQ0FXUyxRQVhULEVBWUdDLElBWkgsQ0FZUSxHQVpSLENBREY7QUFlRCxLQWhCRDtBQWlCQVAsY0FBVUksRUFBVixDQUFhLGFBQWIsRUFBNEIsVUFBQ0ksVUFBRCxFQUFhQyxTQUFiLEVBQTJCO0FBQ3JEVixVQUFJUyxVQUFKO0FBQ0QsS0FGRDtBQUdBUixjQUFVVSxLQUFWO0FBQ0QsR0F2QkQsQ0FEd0I7QUFBQSxDQUExQjtBQXlCQSxJQUFNQyxlQUFlLFNBQWZBLFlBQWU7QUFBQSxTQUNuQixJQUFJaEIsT0FBSixDQUFZLFVBQUNHLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQ3hCWixPQUFHeUIsU0FBSCxDQUNFeEIsS0FBS1EsT0FBTCxDQUFhSyxRQUFRWSxHQUFSLEVBQWIsRUFBNEIsUUFBNUIsRUFBc0MsYUFBdEMsQ0FERixFQUVFUixPQUZGLEVBR0UsVUFBQ1MsR0FBRCxFQUFTO0FBQ1AsVUFBSUEsR0FBSixFQUFTO0FBQ1BmLFlBQUllLEdBQUo7QUFDRCxPQUZELE1BRU87QUFDTGhCLFlBQUksSUFBSjtBQUNEO0FBQ0YsS0FUSDtBQVdELEdBWkQsQ0FEbUI7QUFBQSxDQUFyQjs7QUFlQSxnQkFBZSxVQUFDaUIsTUFBRCxFQUFZO0FBQ3pCQSxTQUFPQyxTQUFQLENBQWlCO0FBQ2ZDLFVBQU0sU0FEUztBQUVmQyxvREFGZTtBQUtmQyxlQUFXO0FBQ1RDLGlCQUFXO0FBQ1RDLHVCQUFlLHVCQUFDL0IsTUFBRCxFQUFTQyxJQUFULEVBQWVDLE9BQWYsRUFBMkI7QUFDeEMsY0FBTThCLE9BQU9DLFlBQVlBLFNBQVNDLElBQXJCLEdBQTRCRCxTQUFTQyxJQUFyQyxHQUE0Q25DLFdBQXpEO0FBQ0EsaUJBQU9pQyxLQUFLaEMsTUFBTCxFQUFhbUMsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JuQyxJQUFsQixDQUFiLEVBQXNDQyxPQUF0QyxFQUNKbUMsSUFESSxDQUNDOUIsaUJBREQsRUFFSjhCLElBRkksQ0FFQ2hCLFlBRkQsQ0FBUDtBQUdEO0FBTlE7QUFERjtBQUxJLEdBQWpCO0FBZ0JELENBakJEIiwiZmlsZSI6InBhY2thZ2VzL3NpdGVtYXAvc2VydmVyL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU2l0ZW1hcEdlbmVyYXRvciA9IHJlcXVpcmUoJy4vYnVpbGRlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29uc3QgZGVmYXVsdEhvb2sgPSAoc291cmNlLCBhcmdzLCBjb250ZXh0KSA9PiB7XG4gIGlmICghY29udGV4dC51c2VyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IGJlIGF1dGhlbnRpY2F0ZWQnKTtcbiAgfVxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGFyZ3MpO1xufTtcbmNvbnN0IHJlZ2VuZXJhdGVTaXRlbWFwID0gKCkgPT5cbiAgbmV3IFByb21pc2UoKHlheSwgbmF5KSA9PiB7XG4gICAgY29uc3QgZ2VuZXJhdG9yID0gbmV3IFNpdGVtYXBHZW5lcmF0b3IocHJvY2Vzcy5lbnYuVVJMKTtcbiAgICBnZW5lcmF0b3Iub24oJ2RvbmUnLCAoc2l0ZW1hcCkgPT4ge1xuICAgICAgeWF5KFxuICAgICAgICBzaXRlbWFwXG4gICAgICAgICAgLnNwbGl0KCclQzMlQTQnKVxuICAgICAgICAgIC5qb2luKCfDpCcpXG4gICAgICAgICAgLnNwbGl0KCclQzMlQjYnKVxuICAgICAgICAgIC5qb2luKCfDticpXG4gICAgICAgICAgLnNwbGl0KCclQzMlQkMnKVxuICAgICAgICAgIC5qb2luKCfDvCcpXG4gICAgICAgICAgLnNwbGl0KCclQzMlQTQnKVxuICAgICAgICAgIC5qb2luKCfDhCcpXG4gICAgICAgICAgLnNwbGl0KCclQzMlQjYnKVxuICAgICAgICAgIC5qb2luKCfDlicpXG4gICAgICAgICAgLnNwbGl0KCclQzMlQkMnKVxuICAgICAgICAgIC5qb2luKCfDnCcpXG4gICAgICApO1xuICAgIH0pO1xuICAgIGdlbmVyYXRvci5vbignY2xpZW50ZXJyb3InLCAocXVldWVFcnJvciwgZXJyb3JEYXRhKSA9PiB7XG4gICAgICBuYXkocXVldWVFcnJvcik7XG4gICAgfSk7XG4gICAgZ2VuZXJhdG9yLnN0YXJ0KCk7XG4gIH0pO1xuY29uc3Qgd3JpdGVTaXRlbWFwID0gc2l0ZW1hcCA9PlxuICBuZXcgUHJvbWlzZSgoeWF5LCBuYXkpID0+IHtcbiAgICBmcy53cml0ZUZpbGUoXG4gICAgICBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJ3B1YmxpYycsICdzaXRlbWFwLnhtbCcpLFxuICAgICAgc2l0ZW1hcCxcbiAgICAgIChlcnIpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIG5heShlcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHlheSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gIH0pO1xuXG5leHBvcnQgZGVmYXVsdCAoc2NoZW1hKSA9PiB7XG4gIHNjaGVtYS5hZGRTY2hlbWEoe1xuICAgIG5hbWU6ICdzaXRlbWFwJyxcbiAgICBtdXRhdGlvbjogYFxuICAgICAgY3JlYXRlU2l0ZW1hcDogQm9vbGVhblxuICAgIGAsXG4gICAgcmVzb2x2ZXJzOiB7XG4gICAgICBtdXRhdGlvbnM6IHtcbiAgICAgICAgY3JlYXRlU2l0ZW1hcDogKHNvdXJjZSwgYXJncywgY29udGV4dCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGhvb2sgPSBNdXRhdGlvbiAmJiBNdXRhdGlvbi5wYWdlID8gTXV0YXRpb24ucGFnZSA6IGRlZmF1bHRIb29rO1xuICAgICAgICAgIHJldHVybiBob29rKHNvdXJjZSwgT2JqZWN0LmFzc2lnbih7fSwgYXJncyksIGNvbnRleHQpXG4gICAgICAgICAgICAudGhlbihyZWdlbmVyYXRlU2l0ZW1hcClcbiAgICAgICAgICAgIC50aGVuKHdyaXRlU2l0ZW1hcCk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufTtcbiJdfQ==
