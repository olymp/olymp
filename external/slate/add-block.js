import { Text, Block, Inline } from 'slate';
import hasBlock from './utils/has-block';

var addBlock = function addBlock(value, node, schema, parentKey) {
  var index = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var transform = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : value.change();
  var _node = node,
      defaultNodes = _node.defaultNodes,
      defaultText = _node.defaultText;
  var _node2 = node,
      type = _node2.type,
      initNode = _node2.initNode;

  var defaultNode = 'paragraph';

  var document = value.document,
      blocks = value.blocks;

  // Handle everything but list buttons.

  if (type !== 'bulleted-list' && type !== 'numbered-list') {
    var isActive = hasBlock(value, type);
    var isList = hasBlock(value, 'bulleted-list-item') || hasBlock(value, 'numbered-list-item');

    if (isList) {
      transform = transform.setBlock(isActive ? defaultNode : type).unwrapBlock('bulleted-list').unwrapBlock('numbered-list');
    } else {
      if (initNode) {
        node = initNode(node, { value: value, schema: schema, parentKey: parentKey, index: index, transform: transform });
      }
      var block = createBlock(node);

      if (defaultNodes && typeof defaultNodes === 'function') {
        defaultNodes = defaultNodes({ value: value, node: node, schema: schema, parentKey: parentKey, index: index, transform: transform });
      } else if (!defaultNodes && !block.isVoid) {
        defaultNodes = [Text.create(defaultText)];
      }

      if (block && block.kind === 'block') {
        transform = parentKey ? transform.insertNodeByKey(parentKey, index, block) : transform.insertBlock(block);
      } else if (block) {
        transform = parentKey ? transform.insertNodeByKey(parentKey, index, block) : transform.insertInline(block);
      }

      if (defaultNodes) {
        defaultNodes.forEach(function (item, index) {
          if (typeof item === 'string' && schema.nodes[item]) {
            transform = addBlock(value, schema.nodes[item].slate, schema, block.key, index, transform);
          } else if (item.type && schema.nodes[item.type]) {
            transform = addBlock(value, item, schema, block.key, index, transform);
          } else if (Text.isText(item) || Block.isBlock(item) || Inline.isInline(item)) {
            transform = transform.insertNodeByKey(block.key, index, item);
          } else {
            transform = block.kind === 'block' ? transform.insertNodeByKey(block.key, index, Block.create(item)) : transform.insertNodeByKey(block.key, index, Inline.create(item));
          }
        });
      }
    }
  } else {
    // Handle the extra wrapping required for list buttons.
    var _isList = hasBlock(value, 'bulleted-list-item') || hasBlock(value, 'numbered-list-item');
    console.log(_isList);
    var isType = blocks.some(function (block) {
      return !!document.getClosest(block, function (parent) {
        return parent.type === type;
      });
    });

    if (_isList && isType) {
      transform = transform.setBlock(defaultNode).unwrapBlock('bulleted-list').unwrapBlock('numbered-list');
    } else if (_isList) {
      transform = transform.unwrapBlock(type === 'bulleted-list' ? 'bulleted-list' : 'numbered-list').wrapBlock(type);
    } else {
      transform = transform.setBlock(type === 'bulleted-list' ? 'bulleted-list-item' : 'numbered-list-item').wrapBlock(type);
    }
  }

  return transform;
};

var createBlock = function createBlock(block) {
  var type = block.type;
  var isVoid = block.isVoid,
      key = block.key,
      kind = block.kind,
      data = block.data;

  if (!type) {
    type = key;
  }
  if (kind === 'inline' || !kind && isVoid) {
    return Inline.create({
      type: type,
      isVoid: isVoid,
      kind: kind,
      data: data || {}
    });
  }
  return Block.create({
    type: type,
    isVoid: isVoid,
    kind: kind,
    data: data || {}
  });
};
export default addBlock;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
