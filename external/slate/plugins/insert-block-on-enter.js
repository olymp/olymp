import { Block } from 'slate';
import Debug from 'debug';

var debug = Debug('slate:insert-block-on-enter');

function InsertBlockOnEnterPlugin() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var blockArg = args[0];
  var blockInputProps = void 0;
  var defaultProps = { kind: 'block' };

  if (!blockArg) {
    throw new Error('You must pass a block type (string) or object for the block to insert.');
  }
  if (args[0].constructor.name === 'String') {
    blockInputProps = Object.assign({}, defaultProps, { type: blockArg });
  } else {
    blockInputProps = Object.assign({}, defaultProps, blockArg);
  }

  function onKeyDown(e, change) {
    if (e.key === 'Enter') {
      var value = change.value;
      var document = value.document,
          startKey = value.startKey,
          startBlock = value.startBlock;


      if (startBlock && ['code', 'code-line'].includes(startBlock.type)) {
        return change.insertBlock(startBlock.type);
      }
      if (startBlock && !startBlock.isVoid && startBlock.type !== 'paragraph' && startBlock.type !== 'bulleted-list' && startBlock.type !== 'numbered-list' && startBlock.type !== 'list-item') {
        var nextBlock = document.getNextBlock(startKey);
        var prevBlock = document.getPreviousBlock(startKey);
        var blockToInsert = Block.create(blockInputProps);
        return change.collapseToEndOf(startBlock).insertBlock(blockToInsert).collapseToEnd();
      }
      if (startBlock && startBlock.isVoid) {
        var _nextBlock = document.getNextBlock(startKey);
        var _prevBlock = document.getPreviousBlock(startKey);
        var isFocusedStart = value.selection.hasEdgeAtStartOf(startBlock);
        var isFocusedEnd = value.selection.hasEdgeAtEndOf(startBlock);
        var _blockToInsert = Block.create(blockInputProps);

        // Void block at the end of the document
        if (!_nextBlock) {
          if (isFocusedEnd) {
            debug('no nextBlock, PrevBlock, isFocusedEnd');
            return change.collapseToEndOf(startBlock).insertBlock(_blockToInsert).collapseToEnd();
          }
          if (_prevBlock) {
            debug('no nextBlock, PrevBlock, isFocusedStart');
            var index = document.nodes.indexOf(_prevBlock);
            return change.collapseToEndOf(_prevBlock).insertNodeByKey(document.key, index + 1, _blockToInsert).collapseToStartOf(startBlock);
          }
          debug('no nextBlock, no PrevBlock');
          return change.collapseToStartOf(startBlock).insertNodeByKey(document.key, 0, _blockToInsert);
        }
        // Void block between two blocks
        if (_nextBlock && _prevBlock) {
          if (isFocusedStart) {
            debug('nextBlock, prevBlock, isFocusedStart');
            var _index = document.nodes.indexOf(_prevBlock);
            return change.collapseToEndOf(_prevBlock).insertNodeByKey(document.key, _index + 1, _blockToInsert).collapseToStartOf(startBlock);
          }
          debug('nextBlock, prevBlock, isFocusedEnd');
          // NOe rart skjer her
          return change.collapseToEndOf(startBlock).insertBlock(_blockToInsert);
        }
        // Void block in the beginning of the document
        if (_nextBlock && !_prevBlock) {
          if (isFocusedStart) {
            debug('nextBlock, no prevBlock, isFocusedStart');
            return change.collapseToStartOf(startBlock).insertNodeByKey(document.key, 0, _blockToInsert);
          }
          debug('nextBlock, no prevBlock, isFocusedEnd');
          return change.collapseToEndOf(startBlock).insertBlock(_blockToInsert);
        }
      }
    }
  }

  return {
    onKeyDown: onKeyDown
  };
}

export default InsertBlockOnEnterPlugin;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
