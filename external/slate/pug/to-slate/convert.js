var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import lex from 'pug-lexer';
import parse from 'pug-parser';
import { registry } from 'olymp-slate';

var map = {
  col: 'column',
  cols: 'columns',
  p: 'paragraph',
  a: 'link',
  h1: 'heading-one',
  h2: 'heading-two',
  h3: 'heading-three',
  h4: 'heading-four',
  h5: 'heading-five',
  h6: 'heading-six',
  link: function link(node) {
    node.kind = 'inline';
    return node;
  },
  gql: function gql(node) {
    var text = node.nodes.filter(function (x) {
      return x.leaves[0].text !== '\n';
    }).map(function (x) {
      return x.leaves[0].text;
    }).join('\n');
    node.type = 'graphiql';
    node.isVoid = true;
    node.data.query = text;
    console.log(text);
    return node;
  },
  code: function code(node) {
    node.nodes = node.nodes.filter(function (x) {
      return x.leaves[0].text !== '\n';
    }).map(function (x) {
      return {
        type: 'code-line',
        kind: 'block',
        nodes: [x]
      };
    });
    return node;
  },
  table: function table(node) {
    if (node.data && node.data.columns) {
      node.data.columns = node.data.columns.split('|');
    }
    node.nodes = node.nodes.filter(function (x) {
      return x.leaves[0].text !== '\n' && x.leaves[0].text !== '';
    }).map(function (x) {
      return {
        type: 'table-row',
        kind: 'block',
        nodes: x.leaves[0].text.split('|').map(function (text) {
          return {
            type: 'table-data',
            kind: 'block',
            nodes: [{
              kind: 'text',
              leaves: [{
                kind: 'leaf',
                text: text
              }]
            }]
          };
        })
      };
    });
    return node;
  }
};

var convert = function convert(src) {
  var v = parse(lex(src), { src: src });
  var convertNode = function convertNode(_ref) {
    var type = _ref.type,
        name = _ref.name,
        _ref$attrs = _ref.attrs,
        attrs = _ref$attrs === undefined ? [] : _ref$attrs,
        block = _ref.block,
        val = _ref.val;

    if (type === 'Tag') {
      name = map[name] && typeof map[name] === 'string' ? map[name] : name;
      var reg = registry.blocks[name] || {};
      var node = {
        isVoid: reg.isVoid,
        type: name,
        kind: 'block',
        data: attrs.reduce(function (r, i) {
          var val = i.val;
          if (typeof val === 'string' && val.charAt(0) === '"' && val.charAt(val.length - 1) === '"') {
            val = val.substr(1, val.length - 2);
          } else if (typeof val === 'string' && val.charAt(0) === "'" && val.charAt(val.length - 1) === "'") {
            val = val.substr(1, val.length - 2);
          }
          return _extends({}, r, _defineProperty({}, i.name, val));
        }, {}),
        nodes: block && block.nodes && block.nodes.map(convertNode).filter(function (x) {
          return x;
        })
      };
      return map[name] && typeof map[name] === 'function' && map[name](node) || node;
    } else if (type === 'Text') {
      return {
        kind: 'text',
        leaves: [{ kind: 'leaf', text: val }]
      };
    }
  };
  return { nodes: v.nodes.map(convertNode).filter(function (x) {
      return x;
    }) };
};

export default convert;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
