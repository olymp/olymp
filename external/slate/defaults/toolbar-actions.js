import React from 'react';
import FaLink from 'olymp-icons/lib/fa-link';
import FaAlignCenter from 'olymp-icons/lib/fa-align-center';

import I from '../components/icon';

export default [{
  type: 'link', // ['link', 'link-page', 'link-media'],
  label: React.createElement(I, { icon: FaLink }),
  description: 'Link', // ['Extern', 'Intern', 'Datei'],
  onClick: function onClick(_ref, isActive) {
    var value = _ref.value,
        onChange = _ref.onChange;

    if (isActive) {
      onChange(value.change().unwrapInline('link'));
    } else {
      var href = window.prompt('URL');
      if (href) {
        if (href.indexOf('mailto') === 0) {} else if (href.indexOf('tel') === 0) {} else if (href.indexOf('/') === 0) {} else if (href.indexOf('http') !== 0 && href.indexOf('.') !== -1) {
          href = 'http://' + href;
        }
        onChange(value.change().wrapInline({
          type: 'link',
          data: { href: href, target: '_blank' }
        }).collapseToEnd());
      }
    }
  },
  isActive: function isActive(_ref2) {
    var value = _ref2.value;
    return value && value.inlines.some(function (inline) {
      return inline.type === 'link';
    });
  }
}, {
  type: 'center',
  label: React.createElement(I, { icon: FaAlignCenter }),
  description: 'Center',
  onClick: function onClick(_ref3, isActive) {
    var value = _ref3.value,
        onChange = _ref3.onChange;

    if (isActive) {
      onChange(value.change().unwrapBlock('center'));
    } else {
      onChange(value.change().wrapBlock({ type: 'center' }).collapseToEnd());
    }
  },
  isActive: function isActive(_ref4) {
    var value = _ref4.value;
    return value && value.inlines.some(function (inline) {
      return inline.type === 'link';
    });
  }
}];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL3NsYXRlL2RlZmF1bHRzL3Rvb2xiYXItYWN0aW9ucy5lczYiXSwibmFtZXMiOlsiUmVhY3QiLCJJIiwidHlwZSIsImxhYmVsIiwiRmFMaW5rIiwiZGVzY3JpcHRpb24iLCJvbkNsaWNrIiwiaXNBY3RpdmUiLCJ2YWx1ZSIsIm9uQ2hhbmdlIiwiY2hhbmdlIiwidW53cmFwSW5saW5lIiwiaHJlZiIsIndpbmRvdyIsInByb21wdCIsImluZGV4T2YiLCJ3cmFwSW5saW5lIiwiZGF0YSIsInRhcmdldCIsImNvbGxhcHNlVG9FbmQiLCJpbmxpbmVzIiwic29tZSIsImlubGluZSIsIkZhQWxpZ25DZW50ZXIiLCJ1bndyYXBCbG9jayIsIndyYXBCbG9jayJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjs7OztBQUVBLE9BQU9DLENBQVAsTUFBYyxvQkFBZDs7QUFFQSxlQUFlLENBQ2I7QUFDRUMsUUFBTSxNQURSLEVBQ2dCO0FBQ2RDLFNBQU8sb0JBQUMsQ0FBRCxJQUFHLE1BQU1DLE1BQVQsR0FGVDtBQUdFQyxlQUFhLE1BSGYsRUFHdUI7QUFDckJDLFdBQVMsdUJBQXNCQyxRQUF0QixFQUFtQztBQUFBLFFBQWhDQyxLQUFnQyxRQUFoQ0EsS0FBZ0M7QUFBQSxRQUF6QkMsUUFBeUIsUUFBekJBLFFBQXlCOztBQUMxQyxRQUFJRixRQUFKLEVBQWM7QUFDWkUsZUFBU0QsTUFBTUUsTUFBTixHQUFlQyxZQUFmLENBQTRCLE1BQTVCLENBQVQ7QUFDRCxLQUZELE1BRU87QUFDTCxVQUFJQyxPQUFPQyxPQUFPQyxNQUFQLENBQWMsS0FBZCxDQUFYO0FBQ0EsVUFBSUYsSUFBSixFQUFVO0FBQ1IsWUFBSUEsS0FBS0csT0FBTCxDQUFhLFFBQWIsTUFBMkIsQ0FBL0IsRUFBa0MsQ0FDakMsQ0FERCxNQUNPLElBQUlILEtBQUtHLE9BQUwsQ0FBYSxLQUFiLE1BQXdCLENBQTVCLEVBQStCLENBQ3JDLENBRE0sTUFDQSxJQUFJSCxLQUFLRyxPQUFMLENBQWEsR0FBYixNQUFzQixDQUExQixFQUE2QixDQUNuQyxDQURNLE1BQ0EsSUFBSUgsS0FBS0csT0FBTCxDQUFhLE1BQWIsTUFBeUIsQ0FBekIsSUFBOEJILEtBQUtHLE9BQUwsQ0FBYSxHQUFiLE1BQXNCLENBQUMsQ0FBekQsRUFBNEQ7QUFDakVILDZCQUFpQkEsSUFBakI7QUFDRDtBQUNESCxpQkFDRUQsTUFDR0UsTUFESCxHQUVHTSxVQUZILENBRWM7QUFDVmQsZ0JBQU0sTUFESTtBQUVWZSxnQkFBTSxFQUFFTCxVQUFGLEVBQVFNLFFBQVEsUUFBaEI7QUFGSSxTQUZkLEVBTUdDLGFBTkgsRUFERjtBQVNEO0FBQ0Y7QUFDRixHQTNCSDtBQTRCRVosWUFBVTtBQUFBLFFBQUdDLEtBQUgsU0FBR0EsS0FBSDtBQUFBLFdBQ1JBLFNBQVNBLE1BQU1ZLE9BQU4sQ0FBY0MsSUFBZCxDQUFtQjtBQUFBLGFBQVVDLE9BQU9wQixJQUFQLEtBQWdCLE1BQTFCO0FBQUEsS0FBbkIsQ0FERDtBQUFBO0FBNUJaLENBRGEsRUFnQ2I7QUFDRUEsUUFBTSxRQURSO0FBRUVDLFNBQU8sb0JBQUMsQ0FBRCxJQUFHLE1BQU1vQixhQUFULEdBRlQ7QUFHRWxCLGVBQWEsUUFIZjtBQUlFQyxXQUFTLHdCQUFzQkMsUUFBdEIsRUFBbUM7QUFBQSxRQUFoQ0MsS0FBZ0MsU0FBaENBLEtBQWdDO0FBQUEsUUFBekJDLFFBQXlCLFNBQXpCQSxRQUF5Qjs7QUFDMUMsUUFBSUYsUUFBSixFQUFjO0FBQ1pFLGVBQVNELE1BQU1FLE1BQU4sR0FBZWMsV0FBZixDQUEyQixRQUEzQixDQUFUO0FBQ0QsS0FGRCxNQUVPO0FBQ0xmLGVBQ0VELE1BQ0dFLE1BREgsR0FFR2UsU0FGSCxDQUVhLEVBQUV2QixNQUFNLFFBQVIsRUFGYixFQUdHaUIsYUFISCxFQURGO0FBTUQ7QUFDRixHQWZIO0FBZ0JFWixZQUFVO0FBQUEsUUFBR0MsS0FBSCxTQUFHQSxLQUFIO0FBQUEsV0FDUkEsU0FBU0EsTUFBTVksT0FBTixDQUFjQyxJQUFkLENBQW1CO0FBQUEsYUFBVUMsT0FBT3BCLElBQVAsS0FBZ0IsTUFBMUI7QUFBQSxLQUFuQixDQUREO0FBQUE7QUFoQlosQ0FoQ2EsQ0FBZiIsImZpbGUiOiJwYWNrYWdlcy9zbGF0ZS9kZWZhdWx0cy90b29sYmFyLWFjdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRmFMaW5rLCBGYUFsaWduQ2VudGVyIH0gZnJvbSAnb2x5bXAtaWNvbnMnO1xuaW1wb3J0IEkgZnJvbSAnLi4vY29tcG9uZW50cy9pY29uJztcblxuZXhwb3J0IGRlZmF1bHQgW1xuICB7XG4gICAgdHlwZTogJ2xpbmsnLCAvLyBbJ2xpbmsnLCAnbGluay1wYWdlJywgJ2xpbmstbWVkaWEnXSxcbiAgICBsYWJlbDogPEkgaWNvbj17RmFMaW5rfSAvPixcbiAgICBkZXNjcmlwdGlvbjogJ0xpbmsnLCAvLyBbJ0V4dGVybicsICdJbnRlcm4nLCAnRGF0ZWknXSxcbiAgICBvbkNsaWNrOiAoeyB2YWx1ZSwgb25DaGFuZ2UgfSwgaXNBY3RpdmUpID0+IHtcbiAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICBvbkNoYW5nZSh2YWx1ZS5jaGFuZ2UoKS51bndyYXBJbmxpbmUoJ2xpbmsnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgaHJlZiA9IHdpbmRvdy5wcm9tcHQoJ1VSTCcpO1xuICAgICAgICBpZiAoaHJlZikge1xuICAgICAgICAgIGlmIChocmVmLmluZGV4T2YoJ21haWx0bycpID09PSAwKSB7XG4gICAgICAgICAgfSBlbHNlIGlmIChocmVmLmluZGV4T2YoJ3RlbCcpID09PSAwKSB7XG4gICAgICAgICAgfSBlbHNlIGlmIChocmVmLmluZGV4T2YoJy8nKSA9PT0gMCkge1xuICAgICAgICAgIH0gZWxzZSBpZiAoaHJlZi5pbmRleE9mKCdodHRwJykgIT09IDAgJiYgaHJlZi5pbmRleE9mKCcuJykgIT09IC0xKSB7XG4gICAgICAgICAgICBocmVmID0gYGh0dHA6Ly8ke2hyZWZ9YDtcbiAgICAgICAgICB9XG4gICAgICAgICAgb25DaGFuZ2UoXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgICAuY2hhbmdlKClcbiAgICAgICAgICAgICAgLndyYXBJbmxpbmUoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5rJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB7IGhyZWYsIHRhcmdldDogJ19ibGFuaycgfSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmNvbGxhcHNlVG9FbmQoKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBpc0FjdGl2ZTogKHsgdmFsdWUgfSkgPT5cbiAgICAgIHZhbHVlICYmIHZhbHVlLmlubGluZXMuc29tZShpbmxpbmUgPT4gaW5saW5lLnR5cGUgPT09ICdsaW5rJyksXG4gIH0sXG4gIHtcbiAgICB0eXBlOiAnY2VudGVyJyxcbiAgICBsYWJlbDogPEkgaWNvbj17RmFBbGlnbkNlbnRlcn0gLz4sXG4gICAgZGVzY3JpcHRpb246ICdDZW50ZXInLFxuICAgIG9uQ2xpY2s6ICh7IHZhbHVlLCBvbkNoYW5nZSB9LCBpc0FjdGl2ZSkgPT4ge1xuICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgIG9uQ2hhbmdlKHZhbHVlLmNoYW5nZSgpLnVud3JhcEJsb2NrKCdjZW50ZXInKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbkNoYW5nZShcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgLmNoYW5nZSgpXG4gICAgICAgICAgICAud3JhcEJsb2NrKHsgdHlwZTogJ2NlbnRlcicgfSlcbiAgICAgICAgICAgIC5jb2xsYXBzZVRvRW5kKCksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpc0FjdGl2ZTogKHsgdmFsdWUgfSkgPT5cbiAgICAgIHZhbHVlICYmIHZhbHVlLmlubGluZXMuc29tZShpbmxpbmUgPT4gaW5saW5lLnR5cGUgPT09ICdsaW5rJyksXG4gIH0sXG5dO1xuIl19
