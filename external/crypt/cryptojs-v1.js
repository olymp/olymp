import CryptoJS from 'crypto-js';

var keySize = 256;
var ivSize = 128;
var iterations = 100;

export var encrypt = function encrypt(m, pass) {
  var msg = JSON.stringify(m);
  var salt = CryptoJS.lib.WordArray.random(128 / 8);

  var key = CryptoJS.PBKDF2(pass, salt, {
    keySize: keySize / 32,
    iterations: iterations
  });

  var iv = CryptoJS.lib.WordArray.random(128 / 8);

  var encrypted = CryptoJS.AES.encrypt(msg, key, {
    iv: iv,
    padding: CryptoJS.pad.Pkcs7,
    mode: CryptoJS.mode.CBC
  });

  // salt, iv will be hex 32 in length
  // append them to the ciphertext for use  in decryption
  var transitmessage = salt.toString() + iv.toString() + encrypted.toString();
  return transitmessage;
};

export var decrypt = function decrypt(transitmessage, pass, mapper) {
  var salt = CryptoJS.enc.Hex.parse(transitmessage.substr(0, 32));
  var iv = CryptoJS.enc.Hex.parse(transitmessage.substr(32, 32));
  var encrypted = transitmessage.substring(64);

  var key = CryptoJS.PBKDF2(pass, salt, {
    keySize: keySize / 32,
    iterations: iterations
  });

  var decrypted = CryptoJS.AES.decrypt(encrypted, key, {
    iv: iv,
    padding: CryptoJS.pad.Pkcs7,
    mode: CryptoJS.mode.CBC
  });
  return mapper ? mapper(JSON.parse(decrypted.toString(CryptoJS.enc.Utf8))) : JSON.parse(decrypted.toString(CryptoJS.enc.Utf8));
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL2NyeXB0L2NyeXB0b2pzLXYxLmVzNiJdLCJuYW1lcyI6WyJDcnlwdG9KUyIsImtleVNpemUiLCJpdlNpemUiLCJpdGVyYXRpb25zIiwiZW5jcnlwdCIsIm0iLCJwYXNzIiwibXNnIiwiSlNPTiIsInN0cmluZ2lmeSIsInNhbHQiLCJsaWIiLCJXb3JkQXJyYXkiLCJyYW5kb20iLCJrZXkiLCJQQktERjIiLCJpdiIsImVuY3J5cHRlZCIsIkFFUyIsInBhZGRpbmciLCJwYWQiLCJQa2NzNyIsIm1vZGUiLCJDQkMiLCJ0cmFuc2l0bWVzc2FnZSIsInRvU3RyaW5nIiwiZGVjcnlwdCIsIm1hcHBlciIsImVuYyIsIkhleCIsInBhcnNlIiwic3Vic3RyIiwic3Vic3RyaW5nIiwiZGVjcnlwdGVkIiwiVXRmOCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsUUFBUCxNQUFxQixXQUFyQjs7QUFFQSxJQUFNQyxVQUFVLEdBQWhCO0FBQ0EsSUFBTUMsU0FBUyxHQUFmO0FBQ0EsSUFBTUMsYUFBYSxHQUFuQjs7QUFFQSxPQUFPLElBQU1DLFVBQVUsU0FBVkEsT0FBVSxDQUFDQyxDQUFELEVBQUlDLElBQUosRUFBYTtBQUNsQyxNQUFNQyxNQUFNQyxLQUFLQyxTQUFMLENBQWVKLENBQWYsQ0FBWjtBQUNBLE1BQU1LLE9BQU9WLFNBQVNXLEdBQVQsQ0FBYUMsU0FBYixDQUF1QkMsTUFBdkIsQ0FBOEIsTUFBTSxDQUFwQyxDQUFiOztBQUVBLE1BQU1DLE1BQU1kLFNBQVNlLE1BQVQsQ0FBZ0JULElBQWhCLEVBQXNCSSxJQUF0QixFQUE0QjtBQUN0Q1QsYUFBU0EsVUFBVSxFQURtQjtBQUV0Q0U7QUFGc0MsR0FBNUIsQ0FBWjs7QUFLQSxNQUFNYSxLQUFLaEIsU0FBU1csR0FBVCxDQUFhQyxTQUFiLENBQXVCQyxNQUF2QixDQUE4QixNQUFNLENBQXBDLENBQVg7O0FBRUEsTUFBTUksWUFBWWpCLFNBQVNrQixHQUFULENBQWFkLE9BQWIsQ0FBcUJHLEdBQXJCLEVBQTBCTyxHQUExQixFQUErQjtBQUMvQ0UsVUFEK0M7QUFFL0NHLGFBQVNuQixTQUFTb0IsR0FBVCxDQUFhQyxLQUZ5QjtBQUcvQ0MsVUFBTXRCLFNBQVNzQixJQUFULENBQWNDO0FBSDJCLEdBQS9CLENBQWxCOztBQU1BO0FBQ0E7QUFDQSxNQUFNQyxpQkFBaUJkLEtBQUtlLFFBQUwsS0FBa0JULEdBQUdTLFFBQUgsRUFBbEIsR0FBa0NSLFVBQVVRLFFBQVYsRUFBekQ7QUFDQSxTQUFPRCxjQUFQO0FBQ0QsQ0FyQk07O0FBdUJQLE9BQU8sSUFBTUUsVUFBVSxTQUFWQSxPQUFVLENBQUNGLGNBQUQsRUFBaUJsQixJQUFqQixFQUF1QnFCLE1BQXZCLEVBQWtDO0FBQ3ZELE1BQU1qQixPQUFPVixTQUFTNEIsR0FBVCxDQUFhQyxHQUFiLENBQWlCQyxLQUFqQixDQUF1Qk4sZUFBZU8sTUFBZixDQUFzQixDQUF0QixFQUF5QixFQUF6QixDQUF2QixDQUFiO0FBQ0EsTUFBTWYsS0FBS2hCLFNBQVM0QixHQUFULENBQWFDLEdBQWIsQ0FBaUJDLEtBQWpCLENBQXVCTixlQUFlTyxNQUFmLENBQXNCLEVBQXRCLEVBQTBCLEVBQTFCLENBQXZCLENBQVg7QUFDQSxNQUFNZCxZQUFZTyxlQUFlUSxTQUFmLENBQXlCLEVBQXpCLENBQWxCOztBQUVBLE1BQU1sQixNQUFNZCxTQUFTZSxNQUFULENBQWdCVCxJQUFoQixFQUFzQkksSUFBdEIsRUFBNEI7QUFDdENULGFBQVNBLFVBQVUsRUFEbUI7QUFFdENFO0FBRnNDLEdBQTVCLENBQVo7O0FBS0EsTUFBTThCLFlBQVlqQyxTQUFTa0IsR0FBVCxDQUFhUSxPQUFiLENBQXFCVCxTQUFyQixFQUFnQ0gsR0FBaEMsRUFBcUM7QUFDckRFLFVBRHFEO0FBRXJERyxhQUFTbkIsU0FBU29CLEdBQVQsQ0FBYUMsS0FGK0I7QUFHckRDLFVBQU10QixTQUFTc0IsSUFBVCxDQUFjQztBQUhpQyxHQUFyQyxDQUFsQjtBQUtBLFNBQU9JLFNBQ0hBLE9BQU9uQixLQUFLc0IsS0FBTCxDQUFXRyxVQUFVUixRQUFWLENBQW1CekIsU0FBUzRCLEdBQVQsQ0FBYU0sSUFBaEMsQ0FBWCxDQUFQLENBREcsR0FFSDFCLEtBQUtzQixLQUFMLENBQVdHLFVBQVVSLFFBQVYsQ0FBbUJ6QixTQUFTNEIsR0FBVCxDQUFhTSxJQUFoQyxDQUFYLENBRko7QUFHRCxDQWxCTSIsImZpbGUiOiJwYWNrYWdlcy9jcnlwdC9jcnlwdG9qcy12MS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDcnlwdG9KUyBmcm9tICdjcnlwdG8tanMnO1xuXG5jb25zdCBrZXlTaXplID0gMjU2O1xuY29uc3QgaXZTaXplID0gMTI4O1xuY29uc3QgaXRlcmF0aW9ucyA9IDEwMDtcblxuZXhwb3J0IGNvbnN0IGVuY3J5cHQgPSAobSwgcGFzcykgPT4ge1xuICBjb25zdCBtc2cgPSBKU09OLnN0cmluZ2lmeShtKTtcbiAgY29uc3Qgc2FsdCA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKDEyOCAvIDgpO1xuXG4gIGNvbnN0IGtleSA9IENyeXB0b0pTLlBCS0RGMihwYXNzLCBzYWx0LCB7XG4gICAga2V5U2l6ZToga2V5U2l6ZSAvIDMyLFxuICAgIGl0ZXJhdGlvbnMsXG4gIH0pO1xuXG4gIGNvbnN0IGl2ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oMTI4IC8gOCk7XG5cbiAgY29uc3QgZW5jcnlwdGVkID0gQ3J5cHRvSlMuQUVTLmVuY3J5cHQobXNnLCBrZXksIHtcbiAgICBpdixcbiAgICBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUGtjczcsXG4gICAgbW9kZTogQ3J5cHRvSlMubW9kZS5DQkMsXG4gIH0pO1xuXG4gIC8vIHNhbHQsIGl2IHdpbGwgYmUgaGV4IDMyIGluIGxlbmd0aFxuICAvLyBhcHBlbmQgdGhlbSB0byB0aGUgY2lwaGVydGV4dCBmb3IgdXNlICBpbiBkZWNyeXB0aW9uXG4gIGNvbnN0IHRyYW5zaXRtZXNzYWdlID0gc2FsdC50b1N0cmluZygpICsgaXYudG9TdHJpbmcoKSArIGVuY3J5cHRlZC50b1N0cmluZygpO1xuICByZXR1cm4gdHJhbnNpdG1lc3NhZ2U7XG59O1xuXG5leHBvcnQgY29uc3QgZGVjcnlwdCA9ICh0cmFuc2l0bWVzc2FnZSwgcGFzcywgbWFwcGVyKSA9PiB7XG4gIGNvbnN0IHNhbHQgPSBDcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHRyYW5zaXRtZXNzYWdlLnN1YnN0cigwLCAzMikpO1xuICBjb25zdCBpdiA9IENyeXB0b0pTLmVuYy5IZXgucGFyc2UodHJhbnNpdG1lc3NhZ2Uuc3Vic3RyKDMyLCAzMikpO1xuICBjb25zdCBlbmNyeXB0ZWQgPSB0cmFuc2l0bWVzc2FnZS5zdWJzdHJpbmcoNjQpO1xuXG4gIGNvbnN0IGtleSA9IENyeXB0b0pTLlBCS0RGMihwYXNzLCBzYWx0LCB7XG4gICAga2V5U2l6ZToga2V5U2l6ZSAvIDMyLFxuICAgIGl0ZXJhdGlvbnMsXG4gIH0pO1xuXG4gIGNvbnN0IGRlY3J5cHRlZCA9IENyeXB0b0pTLkFFUy5kZWNyeXB0KGVuY3J5cHRlZCwga2V5LCB7XG4gICAgaXYsXG4gICAgcGFkZGluZzogQ3J5cHRvSlMucGFkLlBrY3M3LFxuICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuQ0JDLFxuICB9KTtcbiAgcmV0dXJuIG1hcHBlclxuICAgID8gbWFwcGVyKEpTT04ucGFyc2UoZGVjcnlwdGVkLnRvU3RyaW5nKENyeXB0b0pTLmVuYy5VdGY4KSkpXG4gICAgOiBKU09OLnBhcnNlKGRlY3J5cHRlZC50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCkpO1xufTtcbiJdfQ==
