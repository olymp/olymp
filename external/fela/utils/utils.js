import tinycolor from 'tinycolor2';

// COLOR-TRANSFORMATIONS
export var lighten = function lighten(color, percent) {
  return tinycolor(color).lighten(percent || 8).toRgbString();
};
export var darken = function darken(color, percent) {
  return tinycolor(color).darken(percent || 4).toRgbString();
};
export var spin = function spin(color, deg) {
  return tinycolor(color).spin(deg || 180).toRgbString();
};
export var fade = function fade(color, percent) {
  return tinycolor(color).setAlpha(percent / 100 || 0.67).toRgbString();
};

// BORDERS
export var border = function border(theme, color) {
  return theme.borderWidth + 'px ' + theme.borderStyle + ' ' + (color || theme.borderColor);
};

// SHADOWS
export var boxShadow = function boxShadow() {
  var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'rgba(0, 0, 0, 0.1)';
  var intense = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
  return '0px 0px ' + intense + 'px 0px ' + tinycolor(color).toRgbString();
};
export var innerShadow = function innerShadow(color) {
  return 'inset ' + boxShadow(color);
};

export var gradient = function gradient(color1, color2, deg) {
  var tColor1 = tinycolor(lighten(color1)).spin(6);
  var tColor2 = tinycolor(darken(color1)).spin(-3);
  var tDeg = deg || 90;

  if (typeof color2 === 'string') {
    // color1, color2, (deg)
    tColor1 = tinycolor(color1);
    tColor2 = tinycolor(color2);
  } else if (!deg && color2 === parseInt(color2, 10)) {
    // color1, deg
    tDeg = color2;
  }

  return 'linear-gradient(' + (tDeg + 90) + 'deg, ' + tColor1.toRgbString() + ' 0%, ' + tColor2.toRgbString() + ' 100%)';
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL2ZlbGEvdXRpbHMvdXRpbHMuZXM2Il0sIm5hbWVzIjpbInRpbnljb2xvciIsImxpZ2h0ZW4iLCJjb2xvciIsInBlcmNlbnQiLCJ0b1JnYlN0cmluZyIsImRhcmtlbiIsInNwaW4iLCJkZWciLCJmYWRlIiwic2V0QWxwaGEiLCJib3JkZXIiLCJ0aGVtZSIsImJvcmRlcldpZHRoIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJDb2xvciIsImJveFNoYWRvdyIsImludGVuc2UiLCJpbm5lclNoYWRvdyIsImdyYWRpZW50IiwiY29sb3IxIiwiY29sb3IyIiwidENvbG9yMSIsInRDb2xvcjIiLCJ0RGVnIiwicGFyc2VJbnQiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFNBQVAsTUFBc0IsWUFBdEI7O0FBRUE7QUFDQSxPQUFPLElBQU1DLFVBQVUsU0FBVkEsT0FBVSxDQUFDQyxLQUFELEVBQVFDLE9BQVI7QUFBQSxTQUNyQkgsVUFBVUUsS0FBVixFQUFpQkQsT0FBakIsQ0FBeUJFLFdBQVcsQ0FBcEMsRUFBdUNDLFdBQXZDLEVBRHFCO0FBQUEsQ0FBaEI7QUFFUCxPQUFPLElBQU1DLFNBQVMsU0FBVEEsTUFBUyxDQUFDSCxLQUFELEVBQVFDLE9BQVI7QUFBQSxTQUNwQkgsVUFBVUUsS0FBVixFQUFpQkcsTUFBakIsQ0FBd0JGLFdBQVcsQ0FBbkMsRUFBc0NDLFdBQXRDLEVBRG9CO0FBQUEsQ0FBZjtBQUVQLE9BQU8sSUFBTUUsT0FBTyxTQUFQQSxJQUFPLENBQUNKLEtBQUQsRUFBUUssR0FBUjtBQUFBLFNBQ2xCUCxVQUFVRSxLQUFWLEVBQWlCSSxJQUFqQixDQUFzQkMsT0FBTyxHQUE3QixFQUFrQ0gsV0FBbEMsRUFEa0I7QUFBQSxDQUFiO0FBRVAsT0FBTyxJQUFNSSxPQUFPLFNBQVBBLElBQU8sQ0FBQ04sS0FBRCxFQUFRQyxPQUFSO0FBQUEsU0FDbEJILFVBQVVFLEtBQVYsRUFBaUJPLFFBQWpCLENBQTBCTixVQUFVLEdBQVYsSUFBaUIsSUFBM0MsRUFBaURDLFdBQWpELEVBRGtCO0FBQUEsQ0FBYjs7QUFHUDtBQUNBLE9BQU8sSUFBTU0sU0FBUyxTQUFUQSxNQUFTLENBQUNDLEtBQUQsRUFBUVQsS0FBUjtBQUFBLFNBQ2pCUyxNQUFNQyxXQURXLFdBQ01ELE1BQU1FLFdBRFosVUFDMkJYLFNBQVNTLE1BQU1HLFdBRDFDO0FBQUEsQ0FBZjs7QUFHUDtBQUNBLE9BQU8sSUFBTUMsWUFBWSxTQUFaQSxTQUFZO0FBQUEsTUFBQ2IsS0FBRCx1RUFBUyxvQkFBVDtBQUFBLE1BQStCYyxPQUEvQix1RUFBeUMsRUFBekM7QUFBQSxzQkFDWkEsT0FEWSxlQUNLaEIsVUFBVUUsS0FBVixFQUFpQkUsV0FBakIsRUFETDtBQUFBLENBQWxCO0FBRVAsT0FBTyxJQUFNYSxjQUFjLFNBQWRBLFdBQWM7QUFBQSxvQkFBa0JGLFVBQVViLEtBQVYsQ0FBbEI7QUFBQSxDQUFwQjs7QUFFUCxPQUFPLElBQU1nQixXQUFXLFNBQVhBLFFBQVcsQ0FBQ0MsTUFBRCxFQUFTQyxNQUFULEVBQWlCYixHQUFqQixFQUF5QjtBQUMvQyxNQUFJYyxVQUFVckIsVUFBVUMsUUFBUWtCLE1BQVIsQ0FBVixFQUEyQmIsSUFBM0IsQ0FBZ0MsQ0FBaEMsQ0FBZDtBQUNBLE1BQUlnQixVQUFVdEIsVUFBVUssT0FBT2MsTUFBUCxDQUFWLEVBQTBCYixJQUExQixDQUErQixDQUFDLENBQWhDLENBQWQ7QUFDQSxNQUFJaUIsT0FBT2hCLE9BQU8sRUFBbEI7O0FBRUEsTUFBSSxPQUFPYSxNQUFQLEtBQWtCLFFBQXRCLEVBQWdDO0FBQzlCO0FBQ0FDLGNBQVVyQixVQUFVbUIsTUFBVixDQUFWO0FBQ0FHLGNBQVV0QixVQUFVb0IsTUFBVixDQUFWO0FBQ0QsR0FKRCxNQUlPLElBQUksQ0FBQ2IsR0FBRCxJQUFRYSxXQUFXSSxTQUFTSixNQUFULEVBQWlCLEVBQWpCLENBQXZCLEVBQTZDO0FBQ2xEO0FBQ0FHLFdBQU9ILE1BQVA7QUFDRDs7QUFFRCwrQkFBMEJHLE9BQ3hCLEVBREYsY0FDWUYsUUFBUWpCLFdBQVIsRUFEWixhQUN5Q2tCLFFBQVFsQixXQUFSLEVBRHpDO0FBRUQsQ0FoQk0iLCJmaWxlIjoicGFja2FnZXMvZmVsYS91dGlscy91dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0aW55Y29sb3IgZnJvbSAndGlueWNvbG9yMic7XG5cbi8vIENPTE9SLVRSQU5TRk9STUFUSU9OU1xuZXhwb3J0IGNvbnN0IGxpZ2h0ZW4gPSAoY29sb3IsIHBlcmNlbnQpID0+XG4gIHRpbnljb2xvcihjb2xvcikubGlnaHRlbihwZXJjZW50IHx8IDgpLnRvUmdiU3RyaW5nKCk7XG5leHBvcnQgY29uc3QgZGFya2VuID0gKGNvbG9yLCBwZXJjZW50KSA9PlxuICB0aW55Y29sb3IoY29sb3IpLmRhcmtlbihwZXJjZW50IHx8IDQpLnRvUmdiU3RyaW5nKCk7XG5leHBvcnQgY29uc3Qgc3BpbiA9IChjb2xvciwgZGVnKSA9PlxuICB0aW55Y29sb3IoY29sb3IpLnNwaW4oZGVnIHx8IDE4MCkudG9SZ2JTdHJpbmcoKTtcbmV4cG9ydCBjb25zdCBmYWRlID0gKGNvbG9yLCBwZXJjZW50KSA9PlxuICB0aW55Y29sb3IoY29sb3IpLnNldEFscGhhKHBlcmNlbnQgLyAxMDAgfHwgMC42NykudG9SZ2JTdHJpbmcoKTtcblxuLy8gQk9SREVSU1xuZXhwb3J0IGNvbnN0IGJvcmRlciA9ICh0aGVtZSwgY29sb3IpID0+XG4gIGAke3RoZW1lLmJvcmRlcldpZHRofXB4ICR7dGhlbWUuYm9yZGVyU3R5bGV9ICR7Y29sb3IgfHwgdGhlbWUuYm9yZGVyQ29sb3J9YDtcblxuLy8gU0hBRE9XU1xuZXhwb3J0IGNvbnN0IGJveFNoYWRvdyA9IChjb2xvciA9ICdyZ2JhKDAsIDAsIDAsIDAuMSknLCBpbnRlbnNlID0gMTApID0+XG4gIGAwcHggMHB4ICR7aW50ZW5zZX1weCAwcHggJHt0aW55Y29sb3IoY29sb3IpLnRvUmdiU3RyaW5nKCl9YDtcbmV4cG9ydCBjb25zdCBpbm5lclNoYWRvdyA9IGNvbG9yID0+IGBpbnNldCAke2JveFNoYWRvdyhjb2xvcil9YDtcblxuZXhwb3J0IGNvbnN0IGdyYWRpZW50ID0gKGNvbG9yMSwgY29sb3IyLCBkZWcpID0+IHtcbiAgbGV0IHRDb2xvcjEgPSB0aW55Y29sb3IobGlnaHRlbihjb2xvcjEpKS5zcGluKDYpO1xuICBsZXQgdENvbG9yMiA9IHRpbnljb2xvcihkYXJrZW4oY29sb3IxKSkuc3BpbigtMyk7XG4gIGxldCB0RGVnID0gZGVnIHx8IDkwO1xuXG4gIGlmICh0eXBlb2YgY29sb3IyID09PSAnc3RyaW5nJykge1xuICAgIC8vIGNvbG9yMSwgY29sb3IyLCAoZGVnKVxuICAgIHRDb2xvcjEgPSB0aW55Y29sb3IoY29sb3IxKTtcbiAgICB0Q29sb3IyID0gdGlueWNvbG9yKGNvbG9yMik7XG4gIH0gZWxzZSBpZiAoIWRlZyAmJiBjb2xvcjIgPT09IHBhcnNlSW50KGNvbG9yMiwgMTApKSB7XG4gICAgLy8gY29sb3IxLCBkZWdcbiAgICB0RGVnID0gY29sb3IyO1xuICB9XG5cbiAgcmV0dXJuIGBsaW5lYXItZ3JhZGllbnQoJHt0RGVnICtcbiAgICA5MH1kZWcsICR7dENvbG9yMS50b1JnYlN0cmluZygpfSAwJSwgJHt0Q29sb3IyLnRvUmdiU3RyaW5nKCl9IDEwMCUpYDtcbn07XG4iXX0=
