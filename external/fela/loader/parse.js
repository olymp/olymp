'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var eq = function eq(a, b) {
  return a === b;
};
var first = function first(a, b) {
  return a && a[0] === b;
};
var last = function last(a, b) {
  return a && a[a.length - 1] === b;
};
var ensure = function ensure(a, p, b) {
  return !a[p] ? a[p] = b : null;
};

exports.default = function () {
  var schema = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  if (!first(schema, '[')) schema = '[' + schema + ']';
  var result = [];
  var path = [result];

  var _loop = function _loop(i) {
    var char = schema[i];
    var currentPath = path[path.length - 1];
    var prevPath = path[path.length - 2];
    var finish = function finish() {
      if (currentPath.width) {
        currentPath.width = last(currentPath.width, '%') ? currentPath.width : parseInt(currentPath.width);
      }
      if (currentPath.height) {
        currentPath.height = last(currentPath.height, '%') ? currentPath.height : parseInt(currentPath.height);
      }
      if (currentPath.size) {
        currentPath.size = parseInt(currentPath.size);
      }
      if (currentPath.repeat) {
        currentPath.repeat = parseInt(currentPath.repeat);
      }
      if (currentPath.type === 'cg') {
        currentPath.container = true;
        currentPath.grid = true;
      }
      if (currentPath.type === 'sc') {
        currentPath.container = true;
        currentPath.size = 'small';
      }
      if (currentPath.type === 'g') {
        currentPath.grid = true;
      }
      if (currentPath.type === 'c') {
        currentPath.container = true;
      }
      delete currentPath.type;
    };
    if (eq(char, '[')) {
      ensure(currentPath, 'children', []);
      path.push({});
    } else if (eq(char, ']')) {
      finish();
      prevPath.children.push(path.pop());
    } else if (eq(char, ',')) {
      finish();
      prevPath.children.push(path.pop());
      path.push({});
    } else if (['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '%'].includes(char)) {
      if (currentPath.repeat !== undefined) {
        currentPath.repeat += char;
      } else if (currentPath.type !== undefined) {
        ensure(currentPath, 'size', '');
        currentPath.size += char;
      } else if (currentPath.width !== undefined) {
        currentPath.width += char;
      } else {
        ensure(currentPath, 'height', '');
        currentPath.height += char;
      }
    } else if (eq(char, '*')) {
      ensure(currentPath, 'repeat', '');
    } else if (eq(char, 'x')) {
      ensure(currentPath, 'width', '');
    } else {
      ensure(currentPath, 'type', '');
      currentPath.type += char;
    }
  };

  for (var i = 0; i < schema.length; i++) {
    _loop(i);
  }

  return result.children;
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4dGVybmFsL2ZlbGEvbG9hZGVyL3BhcnNlLmVzNiJdLCJuYW1lcyI6WyJlcSIsImEiLCJiIiwiZmlyc3QiLCJsYXN0IiwibGVuZ3RoIiwiZW5zdXJlIiwicCIsInNjaGVtYSIsInJlc3VsdCIsInBhdGgiLCJpIiwiY2hhciIsImN1cnJlbnRQYXRoIiwicHJldlBhdGgiLCJmaW5pc2giLCJ3aWR0aCIsInBhcnNlSW50IiwiaGVpZ2h0Iiwic2l6ZSIsInJlcGVhdCIsInR5cGUiLCJjb250YWluZXIiLCJncmlkIiwicHVzaCIsImNoaWxkcmVuIiwicG9wIiwiaW5jbHVkZXMiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLElBQU1BLEtBQUssU0FBTEEsRUFBSyxDQUFDQyxDQUFELEVBQUlDLENBQUo7QUFBQSxTQUFVRCxNQUFNQyxDQUFoQjtBQUFBLENBQVg7QUFDQSxJQUFNQyxRQUFRLFNBQVJBLEtBQVEsQ0FBQ0YsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsU0FBVUQsS0FBS0EsRUFBRSxDQUFGLE1BQVNDLENBQXhCO0FBQUEsQ0FBZDtBQUNBLElBQU1FLE9BQU8sU0FBUEEsSUFBTyxDQUFDSCxDQUFELEVBQUlDLENBQUo7QUFBQSxTQUFVRCxLQUFLQSxFQUFFQSxFQUFFSSxNQUFGLEdBQVcsQ0FBYixNQUFvQkgsQ0FBbkM7QUFBQSxDQUFiO0FBQ0EsSUFBTUksU0FBUyxTQUFUQSxNQUFTLENBQUNMLENBQUQsRUFBSU0sQ0FBSixFQUFPTCxDQUFQO0FBQUEsU0FBYyxDQUFDRCxFQUFFTSxDQUFGLENBQUQsR0FBU04sRUFBRU0sQ0FBRixJQUFPTCxDQUFoQixHQUFxQixJQUFuQztBQUFBLENBQWY7O2tCQUVlLFlBQWlCO0FBQUEsTUFBaEJNLE1BQWdCLHVFQUFQLEVBQU87O0FBQzlCLE1BQUksQ0FBQ0wsTUFBTUssTUFBTixFQUFjLEdBQWQsQ0FBTCxFQUF5QkEsZUFBYUEsTUFBYjtBQUN6QixNQUFJQyxTQUFTLEVBQWI7QUFDQSxNQUFJQyxP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b0JQLElBQXBCO0FBQ0QsT0FITSxNQUdBLElBQUlDLFlBQVlHLEtBQVosS0FBc0JZLFNBQTFCLEVBQXFDO0FBQzFDZixvQkFBWUcsS0FBWixJQUFxQkosSUFBckI7QUFDRCxPQUZNLE1BRUE7QUFDTE4sZUFBT08sV0FBUCxFQUFvQixRQUFwQixFQUE4QixFQUE5QjtBQUNBQSxvQkFBWUssTUFBWixJQUFzQk4sSUFBdEI7QUFDRDtBQUNGLEtBZE0sTUFjQSxJQUFJWixHQUFHWSxJQUFILEVBQVMsR0FBVCxDQUFKLEVBQW1CO0FBQ3hCTixhQUFPTyxXQUFQLEVBQW9CLFFBQXBCLEVBQThCLEVBQTlCO0FBQ0QsS0FGTSxNQUVBLElBQUliLEdBQUdZLElBQUgsRUFBUyxHQUFULENBQUosRUFBbUI7QUFDeEJOLGFBQU9PLFdBQVAsRUFBb0IsT0FBcEIsRUFBNkIsRUFBN0I7QUFDRCxLQUZNLE1BRUE7QUFDTFAsYUFBT08sV0FBUCxFQUFvQixNQUFwQixFQUE0QixFQUE1QjtBQUNBQSxrQkFBWVEsSUFBWixJQUFvQlQsSUFBcEI7QUFDRDtBQXBFMkI7O0FBSTlCLE9BQUssSUFBSUQsSUFBSSxDQUFiLEVBQWdCQSxJQUFJSCxPQUFPSCxNQUEzQixFQUFtQ00sR0FBbkMsRUFBd0M7QUFBQSxVQUEvQkEsQ0FBK0I7QUFpRXZDOztBQUVELFNBQU9GLE9BQU9nQixRQUFkO0FBQ0QsQyIsImZpbGUiOiJleHRlcm5hbC9mZWxhL2xvYWRlci9wYXJzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgZXEgPSAoYSwgYikgPT4gYSA9PT0gYjtcbmNvbnN0IGZpcnN0ID0gKGEsIGIpID0+IGEgJiYgYVswXSA9PT0gYjtcbmNvbnN0IGxhc3QgPSAoYSwgYikgPT4gYSAmJiBhW2EubGVuZ3RoIC0gMV0gPT09IGI7XG5jb25zdCBlbnN1cmUgPSAoYSwgcCwgYikgPT4gKCFhW3BdID8gKGFbcF0gPSBiKSA6IG51bGwpO1xuXG5leHBvcnQgZGVmYXVsdCAoc2NoZW1hID0gJycpID0+IHtcbiAgaWYgKCFmaXJzdChzY2hlbWEsICdbJykpIHNjaGVtYSA9IGBbJHtzY2hlbWF9XWA7XG4gIGxldCByZXN1bHQgPSBbXTtcbiAgbGV0IHBhdGggPSBbcmVzdWx0XTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2hlbWEubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGFyID0gc2NoZW1hW2ldO1xuICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IHByZXZQYXRoID0gcGF0aFtwYXRoLmxlbmd0aCAtIDJdO1xuICAgIGNvbnN0IGZpbmlzaCA9ICgpID0+IHtcbiAgICAgIGlmIChjdXJyZW50UGF0aC53aWR0aCkge1xuICAgICAgICBjdXJyZW50UGF0aC53aWR0aCA9IGxhc3QoY3VycmVudFBhdGgud2lkdGgsICclJykgPyBjdXJyZW50UGF0aC53aWR0aCA6IHBhcnNlSW50KGN1cnJlbnRQYXRoLndpZHRoKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50UGF0aC5oZWlnaHQpIHtcbiAgICAgICAgY3VycmVudFBhdGguaGVpZ2h0ID0gbGFzdChjdXJyZW50UGF0aC5oZWlnaHQsICclJykgPyBjdXJyZW50UGF0aC5oZWlnaHQgOiBwYXJzZUludChjdXJyZW50UGF0aC5oZWlnaHQpO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRQYXRoLnNpemUpIHtcbiAgICAgICAgY3VycmVudFBhdGguc2l6ZSA9IHBhcnNlSW50KGN1cnJlbnRQYXRoLnNpemUpO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRQYXRoLnJlcGVhdCkge1xuICAgICAgICBjdXJyZW50UGF0aC5yZXBlYXQgPSBwYXJzZUludChjdXJyZW50UGF0aC5yZXBlYXQpO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRQYXRoLnR5cGUgPT09ICdjZycpIHtcbiAgICAgICAgY3VycmVudFBhdGguY29udGFpbmVyID0gdHJ1ZTtcbiAgICAgICAgY3VycmVudFBhdGguZ3JpZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFBhdGgudHlwZSA9PT0gJ3NjJykge1xuICAgICAgICBjdXJyZW50UGF0aC5jb250YWluZXIgPSB0cnVlO1xuICAgICAgICBjdXJyZW50UGF0aC5zaXplID0gJ3NtYWxsJztcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50UGF0aC50eXBlID09PSAnZycpIHtcbiAgICAgICAgY3VycmVudFBhdGguZ3JpZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFBhdGgudHlwZSA9PT0gJ2MnKSB7XG4gICAgICAgIGN1cnJlbnRQYXRoLmNvbnRhaW5lciA9IHRydWU7XG4gICAgICB9XG4gICAgICBkZWxldGUgY3VycmVudFBhdGgudHlwZTtcbiAgICB9XG4gICAgaWYgKGVxKGNoYXIsICdbJykpIHtcbiAgICAgIGVuc3VyZShjdXJyZW50UGF0aCwgJ2NoaWxkcmVuJywgW10pO1xuICAgICAgcGF0aC5wdXNoKHt9KTtcbiAgICB9IGVsc2UgaWYgKGVxKGNoYXIsICddJykpIHtcbiAgICAgIGZpbmlzaCgpO1xuICAgICAgcHJldlBhdGguY2hpbGRyZW4ucHVzaChwYXRoLnBvcCgpKTtcbiAgICB9IGVsc2UgaWYgKGVxKGNoYXIsICcsJykpIHtcbiAgICAgIGZpbmlzaCgpO1xuICAgICAgcHJldlBhdGguY2hpbGRyZW4ucHVzaChwYXRoLnBvcCgpKTtcbiAgICAgIHBhdGgucHVzaCh7fSk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIFsnMCcsICcxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICc3JywgJzgnLCAnOScsICclJ10uaW5jbHVkZXMoY2hhcilcbiAgICApIHtcbiAgICAgIGlmIChjdXJyZW50UGF0aC5yZXBlYXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjdXJyZW50UGF0aC5yZXBlYXQgKz0gY2hhcjtcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudFBhdGgudHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuc3VyZShjdXJyZW50UGF0aCwgJ3NpemUnLCAnJyk7XG4gICAgICAgIGN1cnJlbnRQYXRoLnNpemUgKz0gY2hhcjtcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudFBhdGgud2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjdXJyZW50UGF0aC53aWR0aCArPSBjaGFyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5zdXJlKGN1cnJlbnRQYXRoLCAnaGVpZ2h0JywgJycpO1xuICAgICAgICBjdXJyZW50UGF0aC5oZWlnaHQgKz0gY2hhcjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVxKGNoYXIsICcqJykpIHtcbiAgICAgIGVuc3VyZShjdXJyZW50UGF0aCwgJ3JlcGVhdCcsICcnKTtcbiAgICB9IGVsc2UgaWYgKGVxKGNoYXIsICd4JykpIHtcbiAgICAgIGVuc3VyZShjdXJyZW50UGF0aCwgJ3dpZHRoJywgJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnN1cmUoY3VycmVudFBhdGgsICd0eXBlJywgJycpO1xuICAgICAgY3VycmVudFBhdGgudHlwZSArPSBjaGFyO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQuY2hpbGRyZW47XG59O1xuIl19
